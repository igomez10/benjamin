/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the OrderStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderStatus{}

// OrderStatus contains all the details of an order
type OrderStatus struct {
	// order sub-type
	SubType *string `json:"sub_type,omitempty"`
	// order request id
	RequestId *string `json:"request_id,omitempty"`
	// system generated order id, unique per account
	OrderId *int32 `json:"order_id,omitempty"`
	// conid and exchange. Format supports conid or conid@exchange
	Conidex *string `json:"conidex,omitempty"`
	// Underlying symbol
	Symbol *string `json:"symbol,omitempty"`
	// The side of the market of the order.   * B - Buy contract near posted ask price   * S - Sell contract near posted bid price   * X - Option expired
	Side *string `json:"side,omitempty"`
	// Format contract name
	ContractDescription1 *string `json:"contract_description_1,omitempty"`
	// Trading Exchange or Venue
	ListingExchange *string `json:"listing_exchange,omitempty"`
	OptionAcct      *string `json:"option_acct,omitempty"`
	// Contracts company name
	CompanyName *string `json:"company_name,omitempty"`
	// Quantity updated
	Size *string `json:"size,omitempty"`
	// Total quantity
	TotalSize *string `json:"total_size,omitempty"`
	// Contract traded currency
	Currency *string `json:"currency,omitempty"`
	// account id
	Account *string `json:"account,omitempty"`
	// Types of orders
	OrderType *string `json:"order_type,omitempty"`
	// Limit price
	LimitPrice *string `json:"limit_price,omitempty"`
	// Stop price
	StopPrice *string `json:"stop_price,omitempty"`
	// Cumulative fill
	CumFill *string `json:"cum_fill,omitempty"`
	// *  PendingSubmit - Indicates the order was sent, but confirmation has not been received that it has been received by the destination.                    Occurs most commonly if an exchange is closed. *  PendingCancel - Indicates that a request has been sent to cancel an order but confirmation has not been received of its cancellation. *  PreSubmitted - Indicates that a simulated order type has been accepted by the IBKR system and that this order has yet to be elected.                   The order is held in the IBKR system until the election criteria are met. At that time the order is transmitted to the order destination as specified. *  Submitted - Indicates that the order has been accepted at the order destination and is working. *  Cancelled - Indicates that the balance of the order has been confirmed cancelled by the IB system.                This could occur unexpectedly when IB or the destination has rejected the order. *  Filled - Indicates that the order has been completely filled. *  Inactive - Indicates the order is not working, for instance if the order was invalid and triggered an error message,               or if the order was to short a security and shares have not yet been located.
	OrderStatus *string `json:"order_status,omitempty"`
	// Description of the order status
	OrderStatusDescription *string `json:"order_status_description,omitempty"`
	// Time-in-Force - length of time order will continue working before it is canceled.
	Tif *string `json:"tif,omitempty"`
	// Foreground color in hex format
	FgColor *string `json:"fg_color,omitempty"`
	// Background color in hex format
	BgColor *string `json:"bg_color,omitempty"`
	// If true not allowed to modify order
	OrderNotEditable *bool `json:"order_not_editable,omitempty"`
	// Fields that can be edited in escaped unicode characters
	EditableFields *string `json:"editable_fields,omitempty"`
	// If true not allowed to cancel order
	CannotCancelOrder *bool `json:"cannot_cancel_order,omitempty"`
	// If true order trades outside regular trading hours
	OutsideRth *bool `json:"outside_rth,omitempty"`
	// If true order is de-activated
	DeactivateOrder *bool `json:"deactivate_order,omitempty"`
	// If true price management algo is enabled, refer to https://www.interactivebrokers.com/en/index.php?f=43423
	UsePriceMgmtAlgo *bool `json:"use_price_mgmt_algo,omitempty"`
	// Asset class
	SecType *string `json:"sec_type,omitempty"`
	// List of available chart periods
	AvailableChartPeriods *string `json:"available_chart_periods,omitempty"`
	// Format description of order
	OrderDescription *string `json:"order_description,omitempty"`
	// order_description with the symbol
	OrderDescriptionWithContract *string `json:"order_description_with_contract,omitempty"`
	AlertActive                  *int32  `json:"alert_active,omitempty"`
	// type of the child order
	ChildOrderType *string `json:"child_order_type,omitempty"`
	// Format fillQuantity\\totalQuantity
	SizeAndFills *string `json:"size_and_fills,omitempty"`
	// Position display price
	ExitStrategyDisplayPrice *string `json:"exit_strategy_display_price,omitempty"`
	// Position description to display on chart
	ExitStrategyChartDescription *string `json:"exit_strategy_chart_description,omitempty"`
	// * 1: If your account has position or order for contract * 0: If your account has no position or order for contract
	ExitStrategyToolAvailability *string `json:"exit_strategy_tool_availability,omitempty"`
	// Returns true if contract supports duplicate/opposite side order.
	AllowedDuplicateOpposite *bool `json:"allowed_duplicate_opposite,omitempty"`
	// Time of status update in unix time
	OrderTime *string `json:"order_time,omitempty"`
	// only exists for oca orders, oca orders in same group will have same id
	OcaGroupId *string `json:"oca_group_id,omitempty"`
}

// NewOrderStatus instantiates a new OrderStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderStatus() *OrderStatus {
	this := OrderStatus{}
	return &this
}

// NewOrderStatusWithDefaults instantiates a new OrderStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderStatusWithDefaults() *OrderStatus {
	this := OrderStatus{}
	return &this
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *OrderStatus) GetSubType() string {
	if o == nil || IsNil(o.SubType) {
		var ret string
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetSubTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SubType) {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *OrderStatus) HasSubType() bool {
	if o != nil && !IsNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given string and assigns it to the SubType field.
func (o *OrderStatus) SetSubType(v string) {
	o.SubType = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *OrderStatus) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *OrderStatus) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *OrderStatus) SetRequestId(v string) {
	o.RequestId = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *OrderStatus) GetOrderId() int32 {
	if o == nil || IsNil(o.OrderId) {
		var ret int32
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetOrderIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *OrderStatus) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given int32 and assigns it to the OrderId field.
func (o *OrderStatus) SetOrderId(v int32) {
	o.OrderId = &v
}

// GetConidex returns the Conidex field value if set, zero value otherwise.
func (o *OrderStatus) GetConidex() string {
	if o == nil || IsNil(o.Conidex) {
		var ret string
		return ret
	}
	return *o.Conidex
}

// GetConidexOk returns a tuple with the Conidex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetConidexOk() (*string, bool) {
	if o == nil || IsNil(o.Conidex) {
		return nil, false
	}
	return o.Conidex, true
}

// HasConidex returns a boolean if a field has been set.
func (o *OrderStatus) HasConidex() bool {
	if o != nil && !IsNil(o.Conidex) {
		return true
	}

	return false
}

// SetConidex gets a reference to the given string and assigns it to the Conidex field.
func (o *OrderStatus) SetConidex(v string) {
	o.Conidex = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *OrderStatus) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *OrderStatus) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *OrderStatus) SetSymbol(v string) {
	o.Symbol = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *OrderStatus) GetSide() string {
	if o == nil || IsNil(o.Side) {
		var ret string
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetSideOk() (*string, bool) {
	if o == nil || IsNil(o.Side) {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *OrderStatus) HasSide() bool {
	if o != nil && !IsNil(o.Side) {
		return true
	}

	return false
}

// SetSide gets a reference to the given string and assigns it to the Side field.
func (o *OrderStatus) SetSide(v string) {
	o.Side = &v
}

// GetContractDescription1 returns the ContractDescription1 field value if set, zero value otherwise.
func (o *OrderStatus) GetContractDescription1() string {
	if o == nil || IsNil(o.ContractDescription1) {
		var ret string
		return ret
	}
	return *o.ContractDescription1
}

// GetContractDescription1Ok returns a tuple with the ContractDescription1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetContractDescription1Ok() (*string, bool) {
	if o == nil || IsNil(o.ContractDescription1) {
		return nil, false
	}
	return o.ContractDescription1, true
}

// HasContractDescription1 returns a boolean if a field has been set.
func (o *OrderStatus) HasContractDescription1() bool {
	if o != nil && !IsNil(o.ContractDescription1) {
		return true
	}

	return false
}

// SetContractDescription1 gets a reference to the given string and assigns it to the ContractDescription1 field.
func (o *OrderStatus) SetContractDescription1(v string) {
	o.ContractDescription1 = &v
}

// GetListingExchange returns the ListingExchange field value if set, zero value otherwise.
func (o *OrderStatus) GetListingExchange() string {
	if o == nil || IsNil(o.ListingExchange) {
		var ret string
		return ret
	}
	return *o.ListingExchange
}

// GetListingExchangeOk returns a tuple with the ListingExchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetListingExchangeOk() (*string, bool) {
	if o == nil || IsNil(o.ListingExchange) {
		return nil, false
	}
	return o.ListingExchange, true
}

// HasListingExchange returns a boolean if a field has been set.
func (o *OrderStatus) HasListingExchange() bool {
	if o != nil && !IsNil(o.ListingExchange) {
		return true
	}

	return false
}

// SetListingExchange gets a reference to the given string and assigns it to the ListingExchange field.
func (o *OrderStatus) SetListingExchange(v string) {
	o.ListingExchange = &v
}

// GetOptionAcct returns the OptionAcct field value if set, zero value otherwise.
func (o *OrderStatus) GetOptionAcct() string {
	if o == nil || IsNil(o.OptionAcct) {
		var ret string
		return ret
	}
	return *o.OptionAcct
}

// GetOptionAcctOk returns a tuple with the OptionAcct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetOptionAcctOk() (*string, bool) {
	if o == nil || IsNil(o.OptionAcct) {
		return nil, false
	}
	return o.OptionAcct, true
}

// HasOptionAcct returns a boolean if a field has been set.
func (o *OrderStatus) HasOptionAcct() bool {
	if o != nil && !IsNil(o.OptionAcct) {
		return true
	}

	return false
}

// SetOptionAcct gets a reference to the given string and assigns it to the OptionAcct field.
func (o *OrderStatus) SetOptionAcct(v string) {
	o.OptionAcct = &v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *OrderStatus) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *OrderStatus) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *OrderStatus) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *OrderStatus) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *OrderStatus) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *OrderStatus) SetSize(v string) {
	o.Size = &v
}

// GetTotalSize returns the TotalSize field value if set, zero value otherwise.
func (o *OrderStatus) GetTotalSize() string {
	if o == nil || IsNil(o.TotalSize) {
		var ret string
		return ret
	}
	return *o.TotalSize
}

// GetTotalSizeOk returns a tuple with the TotalSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetTotalSizeOk() (*string, bool) {
	if o == nil || IsNil(o.TotalSize) {
		return nil, false
	}
	return o.TotalSize, true
}

// HasTotalSize returns a boolean if a field has been set.
func (o *OrderStatus) HasTotalSize() bool {
	if o != nil && !IsNil(o.TotalSize) {
		return true
	}

	return false
}

// SetTotalSize gets a reference to the given string and assigns it to the TotalSize field.
func (o *OrderStatus) SetTotalSize(v string) {
	o.TotalSize = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *OrderStatus) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *OrderStatus) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *OrderStatus) SetCurrency(v string) {
	o.Currency = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *OrderStatus) GetAccount() string {
	if o == nil || IsNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetAccountOk() (*string, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *OrderStatus) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *OrderStatus) SetAccount(v string) {
	o.Account = &v
}

// GetOrderType returns the OrderType field value if set, zero value otherwise.
func (o *OrderStatus) GetOrderType() string {
	if o == nil || IsNil(o.OrderType) {
		var ret string
		return ret
	}
	return *o.OrderType
}

// GetOrderTypeOk returns a tuple with the OrderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetOrderTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OrderType) {
		return nil, false
	}
	return o.OrderType, true
}

// HasOrderType returns a boolean if a field has been set.
func (o *OrderStatus) HasOrderType() bool {
	if o != nil && !IsNil(o.OrderType) {
		return true
	}

	return false
}

// SetOrderType gets a reference to the given string and assigns it to the OrderType field.
func (o *OrderStatus) SetOrderType(v string) {
	o.OrderType = &v
}

// GetLimitPrice returns the LimitPrice field value if set, zero value otherwise.
func (o *OrderStatus) GetLimitPrice() string {
	if o == nil || IsNil(o.LimitPrice) {
		var ret string
		return ret
	}
	return *o.LimitPrice
}

// GetLimitPriceOk returns a tuple with the LimitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetLimitPriceOk() (*string, bool) {
	if o == nil || IsNil(o.LimitPrice) {
		return nil, false
	}
	return o.LimitPrice, true
}

// HasLimitPrice returns a boolean if a field has been set.
func (o *OrderStatus) HasLimitPrice() bool {
	if o != nil && !IsNil(o.LimitPrice) {
		return true
	}

	return false
}

// SetLimitPrice gets a reference to the given string and assigns it to the LimitPrice field.
func (o *OrderStatus) SetLimitPrice(v string) {
	o.LimitPrice = &v
}

// GetStopPrice returns the StopPrice field value if set, zero value otherwise.
func (o *OrderStatus) GetStopPrice() string {
	if o == nil || IsNil(o.StopPrice) {
		var ret string
		return ret
	}
	return *o.StopPrice
}

// GetStopPriceOk returns a tuple with the StopPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetStopPriceOk() (*string, bool) {
	if o == nil || IsNil(o.StopPrice) {
		return nil, false
	}
	return o.StopPrice, true
}

// HasStopPrice returns a boolean if a field has been set.
func (o *OrderStatus) HasStopPrice() bool {
	if o != nil && !IsNil(o.StopPrice) {
		return true
	}

	return false
}

// SetStopPrice gets a reference to the given string and assigns it to the StopPrice field.
func (o *OrderStatus) SetStopPrice(v string) {
	o.StopPrice = &v
}

// GetCumFill returns the CumFill field value if set, zero value otherwise.
func (o *OrderStatus) GetCumFill() string {
	if o == nil || IsNil(o.CumFill) {
		var ret string
		return ret
	}
	return *o.CumFill
}

// GetCumFillOk returns a tuple with the CumFill field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetCumFillOk() (*string, bool) {
	if o == nil || IsNil(o.CumFill) {
		return nil, false
	}
	return o.CumFill, true
}

// HasCumFill returns a boolean if a field has been set.
func (o *OrderStatus) HasCumFill() bool {
	if o != nil && !IsNil(o.CumFill) {
		return true
	}

	return false
}

// SetCumFill gets a reference to the given string and assigns it to the CumFill field.
func (o *OrderStatus) SetCumFill(v string) {
	o.CumFill = &v
}

// GetOrderStatus returns the OrderStatus field value if set, zero value otherwise.
func (o *OrderStatus) GetOrderStatus() string {
	if o == nil || IsNil(o.OrderStatus) {
		var ret string
		return ret
	}
	return *o.OrderStatus
}

// GetOrderStatusOk returns a tuple with the OrderStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetOrderStatusOk() (*string, bool) {
	if o == nil || IsNil(o.OrderStatus) {
		return nil, false
	}
	return o.OrderStatus, true
}

// HasOrderStatus returns a boolean if a field has been set.
func (o *OrderStatus) HasOrderStatus() bool {
	if o != nil && !IsNil(o.OrderStatus) {
		return true
	}

	return false
}

// SetOrderStatus gets a reference to the given string and assigns it to the OrderStatus field.
func (o *OrderStatus) SetOrderStatus(v string) {
	o.OrderStatus = &v
}

// GetOrderStatusDescription returns the OrderStatusDescription field value if set, zero value otherwise.
func (o *OrderStatus) GetOrderStatusDescription() string {
	if o == nil || IsNil(o.OrderStatusDescription) {
		var ret string
		return ret
	}
	return *o.OrderStatusDescription
}

// GetOrderStatusDescriptionOk returns a tuple with the OrderStatusDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetOrderStatusDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.OrderStatusDescription) {
		return nil, false
	}
	return o.OrderStatusDescription, true
}

// HasOrderStatusDescription returns a boolean if a field has been set.
func (o *OrderStatus) HasOrderStatusDescription() bool {
	if o != nil && !IsNil(o.OrderStatusDescription) {
		return true
	}

	return false
}

// SetOrderStatusDescription gets a reference to the given string and assigns it to the OrderStatusDescription field.
func (o *OrderStatus) SetOrderStatusDescription(v string) {
	o.OrderStatusDescription = &v
}

// GetTif returns the Tif field value if set, zero value otherwise.
func (o *OrderStatus) GetTif() string {
	if o == nil || IsNil(o.Tif) {
		var ret string
		return ret
	}
	return *o.Tif
}

// GetTifOk returns a tuple with the Tif field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetTifOk() (*string, bool) {
	if o == nil || IsNil(o.Tif) {
		return nil, false
	}
	return o.Tif, true
}

// HasTif returns a boolean if a field has been set.
func (o *OrderStatus) HasTif() bool {
	if o != nil && !IsNil(o.Tif) {
		return true
	}

	return false
}

// SetTif gets a reference to the given string and assigns it to the Tif field.
func (o *OrderStatus) SetTif(v string) {
	o.Tif = &v
}

// GetFgColor returns the FgColor field value if set, zero value otherwise.
func (o *OrderStatus) GetFgColor() string {
	if o == nil || IsNil(o.FgColor) {
		var ret string
		return ret
	}
	return *o.FgColor
}

// GetFgColorOk returns a tuple with the FgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetFgColorOk() (*string, bool) {
	if o == nil || IsNil(o.FgColor) {
		return nil, false
	}
	return o.FgColor, true
}

// HasFgColor returns a boolean if a field has been set.
func (o *OrderStatus) HasFgColor() bool {
	if o != nil && !IsNil(o.FgColor) {
		return true
	}

	return false
}

// SetFgColor gets a reference to the given string and assigns it to the FgColor field.
func (o *OrderStatus) SetFgColor(v string) {
	o.FgColor = &v
}

// GetBgColor returns the BgColor field value if set, zero value otherwise.
func (o *OrderStatus) GetBgColor() string {
	if o == nil || IsNil(o.BgColor) {
		var ret string
		return ret
	}
	return *o.BgColor
}

// GetBgColorOk returns a tuple with the BgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetBgColorOk() (*string, bool) {
	if o == nil || IsNil(o.BgColor) {
		return nil, false
	}
	return o.BgColor, true
}

// HasBgColor returns a boolean if a field has been set.
func (o *OrderStatus) HasBgColor() bool {
	if o != nil && !IsNil(o.BgColor) {
		return true
	}

	return false
}

// SetBgColor gets a reference to the given string and assigns it to the BgColor field.
func (o *OrderStatus) SetBgColor(v string) {
	o.BgColor = &v
}

// GetOrderNotEditable returns the OrderNotEditable field value if set, zero value otherwise.
func (o *OrderStatus) GetOrderNotEditable() bool {
	if o == nil || IsNil(o.OrderNotEditable) {
		var ret bool
		return ret
	}
	return *o.OrderNotEditable
}

// GetOrderNotEditableOk returns a tuple with the OrderNotEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetOrderNotEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.OrderNotEditable) {
		return nil, false
	}
	return o.OrderNotEditable, true
}

// HasOrderNotEditable returns a boolean if a field has been set.
func (o *OrderStatus) HasOrderNotEditable() bool {
	if o != nil && !IsNil(o.OrderNotEditable) {
		return true
	}

	return false
}

// SetOrderNotEditable gets a reference to the given bool and assigns it to the OrderNotEditable field.
func (o *OrderStatus) SetOrderNotEditable(v bool) {
	o.OrderNotEditable = &v
}

// GetEditableFields returns the EditableFields field value if set, zero value otherwise.
func (o *OrderStatus) GetEditableFields() string {
	if o == nil || IsNil(o.EditableFields) {
		var ret string
		return ret
	}
	return *o.EditableFields
}

// GetEditableFieldsOk returns a tuple with the EditableFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetEditableFieldsOk() (*string, bool) {
	if o == nil || IsNil(o.EditableFields) {
		return nil, false
	}
	return o.EditableFields, true
}

// HasEditableFields returns a boolean if a field has been set.
func (o *OrderStatus) HasEditableFields() bool {
	if o != nil && !IsNil(o.EditableFields) {
		return true
	}

	return false
}

// SetEditableFields gets a reference to the given string and assigns it to the EditableFields field.
func (o *OrderStatus) SetEditableFields(v string) {
	o.EditableFields = &v
}

// GetCannotCancelOrder returns the CannotCancelOrder field value if set, zero value otherwise.
func (o *OrderStatus) GetCannotCancelOrder() bool {
	if o == nil || IsNil(o.CannotCancelOrder) {
		var ret bool
		return ret
	}
	return *o.CannotCancelOrder
}

// GetCannotCancelOrderOk returns a tuple with the CannotCancelOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetCannotCancelOrderOk() (*bool, bool) {
	if o == nil || IsNil(o.CannotCancelOrder) {
		return nil, false
	}
	return o.CannotCancelOrder, true
}

// HasCannotCancelOrder returns a boolean if a field has been set.
func (o *OrderStatus) HasCannotCancelOrder() bool {
	if o != nil && !IsNil(o.CannotCancelOrder) {
		return true
	}

	return false
}

// SetCannotCancelOrder gets a reference to the given bool and assigns it to the CannotCancelOrder field.
func (o *OrderStatus) SetCannotCancelOrder(v bool) {
	o.CannotCancelOrder = &v
}

// GetOutsideRth returns the OutsideRth field value if set, zero value otherwise.
func (o *OrderStatus) GetOutsideRth() bool {
	if o == nil || IsNil(o.OutsideRth) {
		var ret bool
		return ret
	}
	return *o.OutsideRth
}

// GetOutsideRthOk returns a tuple with the OutsideRth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetOutsideRthOk() (*bool, bool) {
	if o == nil || IsNil(o.OutsideRth) {
		return nil, false
	}
	return o.OutsideRth, true
}

// HasOutsideRth returns a boolean if a field has been set.
func (o *OrderStatus) HasOutsideRth() bool {
	if o != nil && !IsNil(o.OutsideRth) {
		return true
	}

	return false
}

// SetOutsideRth gets a reference to the given bool and assigns it to the OutsideRth field.
func (o *OrderStatus) SetOutsideRth(v bool) {
	o.OutsideRth = &v
}

// GetDeactivateOrder returns the DeactivateOrder field value if set, zero value otherwise.
func (o *OrderStatus) GetDeactivateOrder() bool {
	if o == nil || IsNil(o.DeactivateOrder) {
		var ret bool
		return ret
	}
	return *o.DeactivateOrder
}

// GetDeactivateOrderOk returns a tuple with the DeactivateOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetDeactivateOrderOk() (*bool, bool) {
	if o == nil || IsNil(o.DeactivateOrder) {
		return nil, false
	}
	return o.DeactivateOrder, true
}

// HasDeactivateOrder returns a boolean if a field has been set.
func (o *OrderStatus) HasDeactivateOrder() bool {
	if o != nil && !IsNil(o.DeactivateOrder) {
		return true
	}

	return false
}

// SetDeactivateOrder gets a reference to the given bool and assigns it to the DeactivateOrder field.
func (o *OrderStatus) SetDeactivateOrder(v bool) {
	o.DeactivateOrder = &v
}

// GetUsePriceMgmtAlgo returns the UsePriceMgmtAlgo field value if set, zero value otherwise.
func (o *OrderStatus) GetUsePriceMgmtAlgo() bool {
	if o == nil || IsNil(o.UsePriceMgmtAlgo) {
		var ret bool
		return ret
	}
	return *o.UsePriceMgmtAlgo
}

// GetUsePriceMgmtAlgoOk returns a tuple with the UsePriceMgmtAlgo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetUsePriceMgmtAlgoOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePriceMgmtAlgo) {
		return nil, false
	}
	return o.UsePriceMgmtAlgo, true
}

// HasUsePriceMgmtAlgo returns a boolean if a field has been set.
func (o *OrderStatus) HasUsePriceMgmtAlgo() bool {
	if o != nil && !IsNil(o.UsePriceMgmtAlgo) {
		return true
	}

	return false
}

// SetUsePriceMgmtAlgo gets a reference to the given bool and assigns it to the UsePriceMgmtAlgo field.
func (o *OrderStatus) SetUsePriceMgmtAlgo(v bool) {
	o.UsePriceMgmtAlgo = &v
}

// GetSecType returns the SecType field value if set, zero value otherwise.
func (o *OrderStatus) GetSecType() string {
	if o == nil || IsNil(o.SecType) {
		var ret string
		return ret
	}
	return *o.SecType
}

// GetSecTypeOk returns a tuple with the SecType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetSecTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SecType) {
		return nil, false
	}
	return o.SecType, true
}

// HasSecType returns a boolean if a field has been set.
func (o *OrderStatus) HasSecType() bool {
	if o != nil && !IsNil(o.SecType) {
		return true
	}

	return false
}

// SetSecType gets a reference to the given string and assigns it to the SecType field.
func (o *OrderStatus) SetSecType(v string) {
	o.SecType = &v
}

// GetAvailableChartPeriods returns the AvailableChartPeriods field value if set, zero value otherwise.
func (o *OrderStatus) GetAvailableChartPeriods() string {
	if o == nil || IsNil(o.AvailableChartPeriods) {
		var ret string
		return ret
	}
	return *o.AvailableChartPeriods
}

// GetAvailableChartPeriodsOk returns a tuple with the AvailableChartPeriods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetAvailableChartPeriodsOk() (*string, bool) {
	if o == nil || IsNil(o.AvailableChartPeriods) {
		return nil, false
	}
	return o.AvailableChartPeriods, true
}

// HasAvailableChartPeriods returns a boolean if a field has been set.
func (o *OrderStatus) HasAvailableChartPeriods() bool {
	if o != nil && !IsNil(o.AvailableChartPeriods) {
		return true
	}

	return false
}

// SetAvailableChartPeriods gets a reference to the given string and assigns it to the AvailableChartPeriods field.
func (o *OrderStatus) SetAvailableChartPeriods(v string) {
	o.AvailableChartPeriods = &v
}

// GetOrderDescription returns the OrderDescription field value if set, zero value otherwise.
func (o *OrderStatus) GetOrderDescription() string {
	if o == nil || IsNil(o.OrderDescription) {
		var ret string
		return ret
	}
	return *o.OrderDescription
}

// GetOrderDescriptionOk returns a tuple with the OrderDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetOrderDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.OrderDescription) {
		return nil, false
	}
	return o.OrderDescription, true
}

// HasOrderDescription returns a boolean if a field has been set.
func (o *OrderStatus) HasOrderDescription() bool {
	if o != nil && !IsNil(o.OrderDescription) {
		return true
	}

	return false
}

// SetOrderDescription gets a reference to the given string and assigns it to the OrderDescription field.
func (o *OrderStatus) SetOrderDescription(v string) {
	o.OrderDescription = &v
}

// GetOrderDescriptionWithContract returns the OrderDescriptionWithContract field value if set, zero value otherwise.
func (o *OrderStatus) GetOrderDescriptionWithContract() string {
	if o == nil || IsNil(o.OrderDescriptionWithContract) {
		var ret string
		return ret
	}
	return *o.OrderDescriptionWithContract
}

// GetOrderDescriptionWithContractOk returns a tuple with the OrderDescriptionWithContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetOrderDescriptionWithContractOk() (*string, bool) {
	if o == nil || IsNil(o.OrderDescriptionWithContract) {
		return nil, false
	}
	return o.OrderDescriptionWithContract, true
}

// HasOrderDescriptionWithContract returns a boolean if a field has been set.
func (o *OrderStatus) HasOrderDescriptionWithContract() bool {
	if o != nil && !IsNil(o.OrderDescriptionWithContract) {
		return true
	}

	return false
}

// SetOrderDescriptionWithContract gets a reference to the given string and assigns it to the OrderDescriptionWithContract field.
func (o *OrderStatus) SetOrderDescriptionWithContract(v string) {
	o.OrderDescriptionWithContract = &v
}

// GetAlertActive returns the AlertActive field value if set, zero value otherwise.
func (o *OrderStatus) GetAlertActive() int32 {
	if o == nil || IsNil(o.AlertActive) {
		var ret int32
		return ret
	}
	return *o.AlertActive
}

// GetAlertActiveOk returns a tuple with the AlertActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetAlertActiveOk() (*int32, bool) {
	if o == nil || IsNil(o.AlertActive) {
		return nil, false
	}
	return o.AlertActive, true
}

// HasAlertActive returns a boolean if a field has been set.
func (o *OrderStatus) HasAlertActive() bool {
	if o != nil && !IsNil(o.AlertActive) {
		return true
	}

	return false
}

// SetAlertActive gets a reference to the given int32 and assigns it to the AlertActive field.
func (o *OrderStatus) SetAlertActive(v int32) {
	o.AlertActive = &v
}

// GetChildOrderType returns the ChildOrderType field value if set, zero value otherwise.
func (o *OrderStatus) GetChildOrderType() string {
	if o == nil || IsNil(o.ChildOrderType) {
		var ret string
		return ret
	}
	return *o.ChildOrderType
}

// GetChildOrderTypeOk returns a tuple with the ChildOrderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetChildOrderTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ChildOrderType) {
		return nil, false
	}
	return o.ChildOrderType, true
}

// HasChildOrderType returns a boolean if a field has been set.
func (o *OrderStatus) HasChildOrderType() bool {
	if o != nil && !IsNil(o.ChildOrderType) {
		return true
	}

	return false
}

// SetChildOrderType gets a reference to the given string and assigns it to the ChildOrderType field.
func (o *OrderStatus) SetChildOrderType(v string) {
	o.ChildOrderType = &v
}

// GetSizeAndFills returns the SizeAndFills field value if set, zero value otherwise.
func (o *OrderStatus) GetSizeAndFills() string {
	if o == nil || IsNil(o.SizeAndFills) {
		var ret string
		return ret
	}
	return *o.SizeAndFills
}

// GetSizeAndFillsOk returns a tuple with the SizeAndFills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetSizeAndFillsOk() (*string, bool) {
	if o == nil || IsNil(o.SizeAndFills) {
		return nil, false
	}
	return o.SizeAndFills, true
}

// HasSizeAndFills returns a boolean if a field has been set.
func (o *OrderStatus) HasSizeAndFills() bool {
	if o != nil && !IsNil(o.SizeAndFills) {
		return true
	}

	return false
}

// SetSizeAndFills gets a reference to the given string and assigns it to the SizeAndFills field.
func (o *OrderStatus) SetSizeAndFills(v string) {
	o.SizeAndFills = &v
}

// GetExitStrategyDisplayPrice returns the ExitStrategyDisplayPrice field value if set, zero value otherwise.
func (o *OrderStatus) GetExitStrategyDisplayPrice() string {
	if o == nil || IsNil(o.ExitStrategyDisplayPrice) {
		var ret string
		return ret
	}
	return *o.ExitStrategyDisplayPrice
}

// GetExitStrategyDisplayPriceOk returns a tuple with the ExitStrategyDisplayPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetExitStrategyDisplayPriceOk() (*string, bool) {
	if o == nil || IsNil(o.ExitStrategyDisplayPrice) {
		return nil, false
	}
	return o.ExitStrategyDisplayPrice, true
}

// HasExitStrategyDisplayPrice returns a boolean if a field has been set.
func (o *OrderStatus) HasExitStrategyDisplayPrice() bool {
	if o != nil && !IsNil(o.ExitStrategyDisplayPrice) {
		return true
	}

	return false
}

// SetExitStrategyDisplayPrice gets a reference to the given string and assigns it to the ExitStrategyDisplayPrice field.
func (o *OrderStatus) SetExitStrategyDisplayPrice(v string) {
	o.ExitStrategyDisplayPrice = &v
}

// GetExitStrategyChartDescription returns the ExitStrategyChartDescription field value if set, zero value otherwise.
func (o *OrderStatus) GetExitStrategyChartDescription() string {
	if o == nil || IsNil(o.ExitStrategyChartDescription) {
		var ret string
		return ret
	}
	return *o.ExitStrategyChartDescription
}

// GetExitStrategyChartDescriptionOk returns a tuple with the ExitStrategyChartDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetExitStrategyChartDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ExitStrategyChartDescription) {
		return nil, false
	}
	return o.ExitStrategyChartDescription, true
}

// HasExitStrategyChartDescription returns a boolean if a field has been set.
func (o *OrderStatus) HasExitStrategyChartDescription() bool {
	if o != nil && !IsNil(o.ExitStrategyChartDescription) {
		return true
	}

	return false
}

// SetExitStrategyChartDescription gets a reference to the given string and assigns it to the ExitStrategyChartDescription field.
func (o *OrderStatus) SetExitStrategyChartDescription(v string) {
	o.ExitStrategyChartDescription = &v
}

// GetExitStrategyToolAvailability returns the ExitStrategyToolAvailability field value if set, zero value otherwise.
func (o *OrderStatus) GetExitStrategyToolAvailability() string {
	if o == nil || IsNil(o.ExitStrategyToolAvailability) {
		var ret string
		return ret
	}
	return *o.ExitStrategyToolAvailability
}

// GetExitStrategyToolAvailabilityOk returns a tuple with the ExitStrategyToolAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetExitStrategyToolAvailabilityOk() (*string, bool) {
	if o == nil || IsNil(o.ExitStrategyToolAvailability) {
		return nil, false
	}
	return o.ExitStrategyToolAvailability, true
}

// HasExitStrategyToolAvailability returns a boolean if a field has been set.
func (o *OrderStatus) HasExitStrategyToolAvailability() bool {
	if o != nil && !IsNil(o.ExitStrategyToolAvailability) {
		return true
	}

	return false
}

// SetExitStrategyToolAvailability gets a reference to the given string and assigns it to the ExitStrategyToolAvailability field.
func (o *OrderStatus) SetExitStrategyToolAvailability(v string) {
	o.ExitStrategyToolAvailability = &v
}

// GetAllowedDuplicateOpposite returns the AllowedDuplicateOpposite field value if set, zero value otherwise.
func (o *OrderStatus) GetAllowedDuplicateOpposite() bool {
	if o == nil || IsNil(o.AllowedDuplicateOpposite) {
		var ret bool
		return ret
	}
	return *o.AllowedDuplicateOpposite
}

// GetAllowedDuplicateOppositeOk returns a tuple with the AllowedDuplicateOpposite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetAllowedDuplicateOppositeOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowedDuplicateOpposite) {
		return nil, false
	}
	return o.AllowedDuplicateOpposite, true
}

// HasAllowedDuplicateOpposite returns a boolean if a field has been set.
func (o *OrderStatus) HasAllowedDuplicateOpposite() bool {
	if o != nil && !IsNil(o.AllowedDuplicateOpposite) {
		return true
	}

	return false
}

// SetAllowedDuplicateOpposite gets a reference to the given bool and assigns it to the AllowedDuplicateOpposite field.
func (o *OrderStatus) SetAllowedDuplicateOpposite(v bool) {
	o.AllowedDuplicateOpposite = &v
}

// GetOrderTime returns the OrderTime field value if set, zero value otherwise.
func (o *OrderStatus) GetOrderTime() string {
	if o == nil || IsNil(o.OrderTime) {
		var ret string
		return ret
	}
	return *o.OrderTime
}

// GetOrderTimeOk returns a tuple with the OrderTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetOrderTimeOk() (*string, bool) {
	if o == nil || IsNil(o.OrderTime) {
		return nil, false
	}
	return o.OrderTime, true
}

// HasOrderTime returns a boolean if a field has been set.
func (o *OrderStatus) HasOrderTime() bool {
	if o != nil && !IsNil(o.OrderTime) {
		return true
	}

	return false
}

// SetOrderTime gets a reference to the given string and assigns it to the OrderTime field.
func (o *OrderStatus) SetOrderTime(v string) {
	o.OrderTime = &v
}

// GetOcaGroupId returns the OcaGroupId field value if set, zero value otherwise.
func (o *OrderStatus) GetOcaGroupId() string {
	if o == nil || IsNil(o.OcaGroupId) {
		var ret string
		return ret
	}
	return *o.OcaGroupId
}

// GetOcaGroupIdOk returns a tuple with the OcaGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderStatus) GetOcaGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.OcaGroupId) {
		return nil, false
	}
	return o.OcaGroupId, true
}

// HasOcaGroupId returns a boolean if a field has been set.
func (o *OrderStatus) HasOcaGroupId() bool {
	if o != nil && !IsNil(o.OcaGroupId) {
		return true
	}

	return false
}

// SetOcaGroupId gets a reference to the given string and assigns it to the OcaGroupId field.
func (o *OrderStatus) SetOcaGroupId(v string) {
	o.OcaGroupId = &v
}

func (o OrderStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SubType) {
		toSerialize["sub_type"] = o.SubType
	}
	if !IsNil(o.RequestId) {
		toSerialize["request_id"] = o.RequestId
	}
	if !IsNil(o.OrderId) {
		toSerialize["order_id"] = o.OrderId
	}
	if !IsNil(o.Conidex) {
		toSerialize["conidex"] = o.Conidex
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Side) {
		toSerialize["side"] = o.Side
	}
	if !IsNil(o.ContractDescription1) {
		toSerialize["contract_description_1"] = o.ContractDescription1
	}
	if !IsNil(o.ListingExchange) {
		toSerialize["listing_exchange"] = o.ListingExchange
	}
	if !IsNil(o.OptionAcct) {
		toSerialize["option_acct"] = o.OptionAcct
	}
	if !IsNil(o.CompanyName) {
		toSerialize["company_name"] = o.CompanyName
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.TotalSize) {
		toSerialize["total_size"] = o.TotalSize
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.OrderType) {
		toSerialize["order_type"] = o.OrderType
	}
	if !IsNil(o.LimitPrice) {
		toSerialize["limit_price"] = o.LimitPrice
	}
	if !IsNil(o.StopPrice) {
		toSerialize["stop_price"] = o.StopPrice
	}
	if !IsNil(o.CumFill) {
		toSerialize["cum_fill"] = o.CumFill
	}
	if !IsNil(o.OrderStatus) {
		toSerialize["order_status"] = o.OrderStatus
	}
	if !IsNil(o.OrderStatusDescription) {
		toSerialize["order_status_description"] = o.OrderStatusDescription
	}
	if !IsNil(o.Tif) {
		toSerialize["tif"] = o.Tif
	}
	if !IsNil(o.FgColor) {
		toSerialize["fg_color"] = o.FgColor
	}
	if !IsNil(o.BgColor) {
		toSerialize["bg_color"] = o.BgColor
	}
	if !IsNil(o.OrderNotEditable) {
		toSerialize["order_not_editable"] = o.OrderNotEditable
	}
	if !IsNil(o.EditableFields) {
		toSerialize["editable_fields"] = o.EditableFields
	}
	if !IsNil(o.CannotCancelOrder) {
		toSerialize["cannot_cancel_order"] = o.CannotCancelOrder
	}
	if !IsNil(o.OutsideRth) {
		toSerialize["outside_rth"] = o.OutsideRth
	}
	if !IsNil(o.DeactivateOrder) {
		toSerialize["deactivate_order"] = o.DeactivateOrder
	}
	if !IsNil(o.UsePriceMgmtAlgo) {
		toSerialize["use_price_mgmt_algo"] = o.UsePriceMgmtAlgo
	}
	if !IsNil(o.SecType) {
		toSerialize["sec_type"] = o.SecType
	}
	if !IsNil(o.AvailableChartPeriods) {
		toSerialize["available_chart_periods"] = o.AvailableChartPeriods
	}
	if !IsNil(o.OrderDescription) {
		toSerialize["order_description"] = o.OrderDescription
	}
	if !IsNil(o.OrderDescriptionWithContract) {
		toSerialize["order_description_with_contract"] = o.OrderDescriptionWithContract
	}
	if !IsNil(o.AlertActive) {
		toSerialize["alert_active"] = o.AlertActive
	}
	if !IsNil(o.ChildOrderType) {
		toSerialize["child_order_type"] = o.ChildOrderType
	}
	if !IsNil(o.SizeAndFills) {
		toSerialize["size_and_fills"] = o.SizeAndFills
	}
	if !IsNil(o.ExitStrategyDisplayPrice) {
		toSerialize["exit_strategy_display_price"] = o.ExitStrategyDisplayPrice
	}
	if !IsNil(o.ExitStrategyChartDescription) {
		toSerialize["exit_strategy_chart_description"] = o.ExitStrategyChartDescription
	}
	if !IsNil(o.ExitStrategyToolAvailability) {
		toSerialize["exit_strategy_tool_availability"] = o.ExitStrategyToolAvailability
	}
	if !IsNil(o.AllowedDuplicateOpposite) {
		toSerialize["allowed_duplicate_opposite"] = o.AllowedDuplicateOpposite
	}
	if !IsNil(o.OrderTime) {
		toSerialize["order_time"] = o.OrderTime
	}
	if !IsNil(o.OcaGroupId) {
		toSerialize["oca_group_id"] = o.OcaGroupId
	}
	return toSerialize, nil
}

type NullableOrderStatus struct {
	value *OrderStatus
	isSet bool
}

func (v NullableOrderStatus) Get() *OrderStatus {
	return v.value
}

func (v *NullableOrderStatus) Set(val *OrderStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderStatus(val *OrderStatus) *NullableOrderStatus {
	return &NullableOrderStatus{value: val, isSet: true}
}

func (v NullableOrderStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
