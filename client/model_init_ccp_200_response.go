/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the InitCCP200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InitCCP200Response{}

// InitCCP200Response struct for InitCCP200Response
type InitCCP200Response struct {
	// Challenge in hex format
	Challenge map[string]interface{} `json:"challenge,omitempty"`
}

// NewInitCCP200Response instantiates a new InitCCP200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInitCCP200Response() *InitCCP200Response {
	this := InitCCP200Response{}
	return &this
}

// NewInitCCP200ResponseWithDefaults instantiates a new InitCCP200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInitCCP200ResponseWithDefaults() *InitCCP200Response {
	this := InitCCP200Response{}
	return &this
}

// GetChallenge returns the Challenge field value if set, zero value otherwise.
func (o *InitCCP200Response) GetChallenge() map[string]interface{} {
	if o == nil || IsNil(o.Challenge) {
		var ret map[string]interface{}
		return ret
	}
	return o.Challenge
}

// GetChallengeOk returns a tuple with the Challenge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitCCP200Response) GetChallengeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Challenge) {
		return map[string]interface{}{}, false
	}
	return o.Challenge, true
}

// HasChallenge returns a boolean if a field has been set.
func (o *InitCCP200Response) HasChallenge() bool {
	if o != nil && !IsNil(o.Challenge) {
		return true
	}

	return false
}

// SetChallenge gets a reference to the given map[string]interface{} and assigns it to the Challenge field.
func (o *InitCCP200Response) SetChallenge(v map[string]interface{}) {
	o.Challenge = v
}

func (o InitCCP200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InitCCP200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Challenge) {
		toSerialize["challenge"] = o.Challenge
	}
	return toSerialize, nil
}

type NullableInitCCP200Response struct {
	value *InitCCP200Response
	isSet bool
}

func (v NullableInitCCP200Response) Get() *InitCCP200Response {
	return v.value
}

func (v *NullableInitCCP200Response) Set(val *InitCCP200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableInitCCP200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableInitCCP200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInitCCP200Response(val *InitCCP200Response) *NullableInitCCP200Response {
	return &NullableInitCCP200Response{value: val, isSet: true}
}

func (v NullableInitCCP200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInitCCP200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
