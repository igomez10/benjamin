/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the SecdefInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecdefInfo{}

// SecdefInfo Contains some basic info of contract
type SecdefInfo struct {
	// IBKR contract identifier
	Conid *float32 `json:"conid,omitempty"`
	// Underlying symbol
	Symbol *string `json:"symbol,omitempty"`
	// Security type
	SecType *string `json:"secType,omitempty"`
	// Primary Exchange, Routing or Trading Venue
	Exchange *string `json:"exchange,omitempty"`
	// Main Trading Venue
	ListingExchange *string `json:"listingExchange,omitempty"`
	// Put or Call of the option. C = Call Option, P = Put Option
	Right *string `json:"right,omitempty"`
	// Set price at which a derivative contract can be bought or sold. The strike price also known as exercise price.
	Strike *float32 `json:"strike,omitempty"`
	// Currency the contract trades in
	Currency *string `json:"currency,omitempty"`
	// Committee on Uniform Securities Identification Procedures number
	Cusip *string `json:"cusip,omitempty"`
	// Annual interest rate paid on a bond
	Coupon *string `json:"coupon,omitempty"`
	// Currency pairs for Forex e.g. EUR.AUD, EUR.CAD, EUR.CHF etc.
	Desc1 *string `json:"desc1,omitempty"`
	// Formatted expiration, strike and right
	Desc2 *string `json:"desc2,omitempty"`
	// Format YYYYMMDD, the date on which the underlying transaction settles if the option is exercised
	MaturityDate *float32 `json:"maturityDate,omitempty"`
	// Multiplier for total premium paid or received for derivative contract.
	Multiplier *string `json:"multiplier,omitempty"`
	// Designation of the contract.
	TradingClass *string `json:"tradingClass,omitempty"`
	// Comma separated list of exchanges or trading venues.
	ValidExchanges *string `json:"validExchanges,omitempty"`
}

// NewSecdefInfo instantiates a new SecdefInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecdefInfo() *SecdefInfo {
	this := SecdefInfo{}
	return &this
}

// NewSecdefInfoWithDefaults instantiates a new SecdefInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecdefInfoWithDefaults() *SecdefInfo {
	this := SecdefInfo{}
	return &this
}

// GetConid returns the Conid field value if set, zero value otherwise.
func (o *SecdefInfo) GetConid() float32 {
	if o == nil || IsNil(o.Conid) {
		var ret float32
		return ret
	}
	return *o.Conid
}

// GetConidOk returns a tuple with the Conid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInfo) GetConidOk() (*float32, bool) {
	if o == nil || IsNil(o.Conid) {
		return nil, false
	}
	return o.Conid, true
}

// HasConid returns a boolean if a field has been set.
func (o *SecdefInfo) HasConid() bool {
	if o != nil && !IsNil(o.Conid) {
		return true
	}

	return false
}

// SetConid gets a reference to the given float32 and assigns it to the Conid field.
func (o *SecdefInfo) SetConid(v float32) {
	o.Conid = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *SecdefInfo) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInfo) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *SecdefInfo) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *SecdefInfo) SetSymbol(v string) {
	o.Symbol = &v
}

// GetSecType returns the SecType field value if set, zero value otherwise.
func (o *SecdefInfo) GetSecType() string {
	if o == nil || IsNil(o.SecType) {
		var ret string
		return ret
	}
	return *o.SecType
}

// GetSecTypeOk returns a tuple with the SecType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInfo) GetSecTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SecType) {
		return nil, false
	}
	return o.SecType, true
}

// HasSecType returns a boolean if a field has been set.
func (o *SecdefInfo) HasSecType() bool {
	if o != nil && !IsNil(o.SecType) {
		return true
	}

	return false
}

// SetSecType gets a reference to the given string and assigns it to the SecType field.
func (o *SecdefInfo) SetSecType(v string) {
	o.SecType = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *SecdefInfo) GetExchange() string {
	if o == nil || IsNil(o.Exchange) {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInfo) GetExchangeOk() (*string, bool) {
	if o == nil || IsNil(o.Exchange) {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *SecdefInfo) HasExchange() bool {
	if o != nil && !IsNil(o.Exchange) {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *SecdefInfo) SetExchange(v string) {
	o.Exchange = &v
}

// GetListingExchange returns the ListingExchange field value if set, zero value otherwise.
func (o *SecdefInfo) GetListingExchange() string {
	if o == nil || IsNil(o.ListingExchange) {
		var ret string
		return ret
	}
	return *o.ListingExchange
}

// GetListingExchangeOk returns a tuple with the ListingExchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInfo) GetListingExchangeOk() (*string, bool) {
	if o == nil || IsNil(o.ListingExchange) {
		return nil, false
	}
	return o.ListingExchange, true
}

// HasListingExchange returns a boolean if a field has been set.
func (o *SecdefInfo) HasListingExchange() bool {
	if o != nil && !IsNil(o.ListingExchange) {
		return true
	}

	return false
}

// SetListingExchange gets a reference to the given string and assigns it to the ListingExchange field.
func (o *SecdefInfo) SetListingExchange(v string) {
	o.ListingExchange = &v
}

// GetRight returns the Right field value if set, zero value otherwise.
func (o *SecdefInfo) GetRight() string {
	if o == nil || IsNil(o.Right) {
		var ret string
		return ret
	}
	return *o.Right
}

// GetRightOk returns a tuple with the Right field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInfo) GetRightOk() (*string, bool) {
	if o == nil || IsNil(o.Right) {
		return nil, false
	}
	return o.Right, true
}

// HasRight returns a boolean if a field has been set.
func (o *SecdefInfo) HasRight() bool {
	if o != nil && !IsNil(o.Right) {
		return true
	}

	return false
}

// SetRight gets a reference to the given string and assigns it to the Right field.
func (o *SecdefInfo) SetRight(v string) {
	o.Right = &v
}

// GetStrike returns the Strike field value if set, zero value otherwise.
func (o *SecdefInfo) GetStrike() float32 {
	if o == nil || IsNil(o.Strike) {
		var ret float32
		return ret
	}
	return *o.Strike
}

// GetStrikeOk returns a tuple with the Strike field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInfo) GetStrikeOk() (*float32, bool) {
	if o == nil || IsNil(o.Strike) {
		return nil, false
	}
	return o.Strike, true
}

// HasStrike returns a boolean if a field has been set.
func (o *SecdefInfo) HasStrike() bool {
	if o != nil && !IsNil(o.Strike) {
		return true
	}

	return false
}

// SetStrike gets a reference to the given float32 and assigns it to the Strike field.
func (o *SecdefInfo) SetStrike(v float32) {
	o.Strike = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *SecdefInfo) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInfo) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *SecdefInfo) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *SecdefInfo) SetCurrency(v string) {
	o.Currency = &v
}

// GetCusip returns the Cusip field value if set, zero value otherwise.
func (o *SecdefInfo) GetCusip() string {
	if o == nil || IsNil(o.Cusip) {
		var ret string
		return ret
	}
	return *o.Cusip
}

// GetCusipOk returns a tuple with the Cusip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInfo) GetCusipOk() (*string, bool) {
	if o == nil || IsNil(o.Cusip) {
		return nil, false
	}
	return o.Cusip, true
}

// HasCusip returns a boolean if a field has been set.
func (o *SecdefInfo) HasCusip() bool {
	if o != nil && !IsNil(o.Cusip) {
		return true
	}

	return false
}

// SetCusip gets a reference to the given string and assigns it to the Cusip field.
func (o *SecdefInfo) SetCusip(v string) {
	o.Cusip = &v
}

// GetCoupon returns the Coupon field value if set, zero value otherwise.
func (o *SecdefInfo) GetCoupon() string {
	if o == nil || IsNil(o.Coupon) {
		var ret string
		return ret
	}
	return *o.Coupon
}

// GetCouponOk returns a tuple with the Coupon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInfo) GetCouponOk() (*string, bool) {
	if o == nil || IsNil(o.Coupon) {
		return nil, false
	}
	return o.Coupon, true
}

// HasCoupon returns a boolean if a field has been set.
func (o *SecdefInfo) HasCoupon() bool {
	if o != nil && !IsNil(o.Coupon) {
		return true
	}

	return false
}

// SetCoupon gets a reference to the given string and assigns it to the Coupon field.
func (o *SecdefInfo) SetCoupon(v string) {
	o.Coupon = &v
}

// GetDesc1 returns the Desc1 field value if set, zero value otherwise.
func (o *SecdefInfo) GetDesc1() string {
	if o == nil || IsNil(o.Desc1) {
		var ret string
		return ret
	}
	return *o.Desc1
}

// GetDesc1Ok returns a tuple with the Desc1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInfo) GetDesc1Ok() (*string, bool) {
	if o == nil || IsNil(o.Desc1) {
		return nil, false
	}
	return o.Desc1, true
}

// HasDesc1 returns a boolean if a field has been set.
func (o *SecdefInfo) HasDesc1() bool {
	if o != nil && !IsNil(o.Desc1) {
		return true
	}

	return false
}

// SetDesc1 gets a reference to the given string and assigns it to the Desc1 field.
func (o *SecdefInfo) SetDesc1(v string) {
	o.Desc1 = &v
}

// GetDesc2 returns the Desc2 field value if set, zero value otherwise.
func (o *SecdefInfo) GetDesc2() string {
	if o == nil || IsNil(o.Desc2) {
		var ret string
		return ret
	}
	return *o.Desc2
}

// GetDesc2Ok returns a tuple with the Desc2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInfo) GetDesc2Ok() (*string, bool) {
	if o == nil || IsNil(o.Desc2) {
		return nil, false
	}
	return o.Desc2, true
}

// HasDesc2 returns a boolean if a field has been set.
func (o *SecdefInfo) HasDesc2() bool {
	if o != nil && !IsNil(o.Desc2) {
		return true
	}

	return false
}

// SetDesc2 gets a reference to the given string and assigns it to the Desc2 field.
func (o *SecdefInfo) SetDesc2(v string) {
	o.Desc2 = &v
}

// GetMaturityDate returns the MaturityDate field value if set, zero value otherwise.
func (o *SecdefInfo) GetMaturityDate() float32 {
	if o == nil || IsNil(o.MaturityDate) {
		var ret float32
		return ret
	}
	return *o.MaturityDate
}

// GetMaturityDateOk returns a tuple with the MaturityDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInfo) GetMaturityDateOk() (*float32, bool) {
	if o == nil || IsNil(o.MaturityDate) {
		return nil, false
	}
	return o.MaturityDate, true
}

// HasMaturityDate returns a boolean if a field has been set.
func (o *SecdefInfo) HasMaturityDate() bool {
	if o != nil && !IsNil(o.MaturityDate) {
		return true
	}

	return false
}

// SetMaturityDate gets a reference to the given float32 and assigns it to the MaturityDate field.
func (o *SecdefInfo) SetMaturityDate(v float32) {
	o.MaturityDate = &v
}

// GetMultiplier returns the Multiplier field value if set, zero value otherwise.
func (o *SecdefInfo) GetMultiplier() string {
	if o == nil || IsNil(o.Multiplier) {
		var ret string
		return ret
	}
	return *o.Multiplier
}

// GetMultiplierOk returns a tuple with the Multiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInfo) GetMultiplierOk() (*string, bool) {
	if o == nil || IsNil(o.Multiplier) {
		return nil, false
	}
	return o.Multiplier, true
}

// HasMultiplier returns a boolean if a field has been set.
func (o *SecdefInfo) HasMultiplier() bool {
	if o != nil && !IsNil(o.Multiplier) {
		return true
	}

	return false
}

// SetMultiplier gets a reference to the given string and assigns it to the Multiplier field.
func (o *SecdefInfo) SetMultiplier(v string) {
	o.Multiplier = &v
}

// GetTradingClass returns the TradingClass field value if set, zero value otherwise.
func (o *SecdefInfo) GetTradingClass() string {
	if o == nil || IsNil(o.TradingClass) {
		var ret string
		return ret
	}
	return *o.TradingClass
}

// GetTradingClassOk returns a tuple with the TradingClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInfo) GetTradingClassOk() (*string, bool) {
	if o == nil || IsNil(o.TradingClass) {
		return nil, false
	}
	return o.TradingClass, true
}

// HasTradingClass returns a boolean if a field has been set.
func (o *SecdefInfo) HasTradingClass() bool {
	if o != nil && !IsNil(o.TradingClass) {
		return true
	}

	return false
}

// SetTradingClass gets a reference to the given string and assigns it to the TradingClass field.
func (o *SecdefInfo) SetTradingClass(v string) {
	o.TradingClass = &v
}

// GetValidExchanges returns the ValidExchanges field value if set, zero value otherwise.
func (o *SecdefInfo) GetValidExchanges() string {
	if o == nil || IsNil(o.ValidExchanges) {
		var ret string
		return ret
	}
	return *o.ValidExchanges
}

// GetValidExchangesOk returns a tuple with the ValidExchanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInfo) GetValidExchangesOk() (*string, bool) {
	if o == nil || IsNil(o.ValidExchanges) {
		return nil, false
	}
	return o.ValidExchanges, true
}

// HasValidExchanges returns a boolean if a field has been set.
func (o *SecdefInfo) HasValidExchanges() bool {
	if o != nil && !IsNil(o.ValidExchanges) {
		return true
	}

	return false
}

// SetValidExchanges gets a reference to the given string and assigns it to the ValidExchanges field.
func (o *SecdefInfo) SetValidExchanges(v string) {
	o.ValidExchanges = &v
}

func (o SecdefInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecdefInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conid) {
		toSerialize["conid"] = o.Conid
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.SecType) {
		toSerialize["secType"] = o.SecType
	}
	if !IsNil(o.Exchange) {
		toSerialize["exchange"] = o.Exchange
	}
	if !IsNil(o.ListingExchange) {
		toSerialize["listingExchange"] = o.ListingExchange
	}
	if !IsNil(o.Right) {
		toSerialize["right"] = o.Right
	}
	if !IsNil(o.Strike) {
		toSerialize["strike"] = o.Strike
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Cusip) {
		toSerialize["cusip"] = o.Cusip
	}
	if !IsNil(o.Coupon) {
		toSerialize["coupon"] = o.Coupon
	}
	if !IsNil(o.Desc1) {
		toSerialize["desc1"] = o.Desc1
	}
	if !IsNil(o.Desc2) {
		toSerialize["desc2"] = o.Desc2
	}
	if !IsNil(o.MaturityDate) {
		toSerialize["maturityDate"] = o.MaturityDate
	}
	if !IsNil(o.Multiplier) {
		toSerialize["multiplier"] = o.Multiplier
	}
	if !IsNil(o.TradingClass) {
		toSerialize["tradingClass"] = o.TradingClass
	}
	if !IsNil(o.ValidExchanges) {
		toSerialize["validExchanges"] = o.ValidExchanges
	}
	return toSerialize, nil
}

type NullableSecdefInfo struct {
	value *SecdefInfo
	isSet bool
}

func (v NullableSecdefInfo) Get() *SecdefInfo {
	return v.value
}

func (v *NullableSecdefInfo) Set(val *SecdefInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSecdefInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSecdefInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecdefInfo(val *SecdefInfo) *NullableSecdefInfo {
	return &NullableSecdefInfo{value: val, isSet: true}
}

func (v NullableSecdefInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecdefInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
