/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the StocksInnerContractsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StocksInnerContractsInner{}

// StocksInnerContractsInner struct for StocksInnerContractsInner
type StocksInnerContractsInner struct {
	// conid of the stock contract
	Conid    *int32  `json:"conid,omitempty"`
	Exchange *string `json:"exchange,omitempty"`
}

// NewStocksInnerContractsInner instantiates a new StocksInnerContractsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStocksInnerContractsInner() *StocksInnerContractsInner {
	this := StocksInnerContractsInner{}
	return &this
}

// NewStocksInnerContractsInnerWithDefaults instantiates a new StocksInnerContractsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStocksInnerContractsInnerWithDefaults() *StocksInnerContractsInner {
	this := StocksInnerContractsInner{}
	return &this
}

// GetConid returns the Conid field value if set, zero value otherwise.
func (o *StocksInnerContractsInner) GetConid() int32 {
	if o == nil || IsNil(o.Conid) {
		var ret int32
		return ret
	}
	return *o.Conid
}

// GetConidOk returns a tuple with the Conid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StocksInnerContractsInner) GetConidOk() (*int32, bool) {
	if o == nil || IsNil(o.Conid) {
		return nil, false
	}
	return o.Conid, true
}

// HasConid returns a boolean if a field has been set.
func (o *StocksInnerContractsInner) HasConid() bool {
	if o != nil && !IsNil(o.Conid) {
		return true
	}

	return false
}

// SetConid gets a reference to the given int32 and assigns it to the Conid field.
func (o *StocksInnerContractsInner) SetConid(v int32) {
	o.Conid = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *StocksInnerContractsInner) GetExchange() string {
	if o == nil || IsNil(o.Exchange) {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StocksInnerContractsInner) GetExchangeOk() (*string, bool) {
	if o == nil || IsNil(o.Exchange) {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *StocksInnerContractsInner) HasExchange() bool {
	if o != nil && !IsNil(o.Exchange) {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *StocksInnerContractsInner) SetExchange(v string) {
	o.Exchange = &v
}

func (o StocksInnerContractsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StocksInnerContractsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conid) {
		toSerialize["conid"] = o.Conid
	}
	if !IsNil(o.Exchange) {
		toSerialize["exchange"] = o.Exchange
	}
	return toSerialize, nil
}

type NullableStocksInnerContractsInner struct {
	value *StocksInnerContractsInner
	isSet bool
}

func (v NullableStocksInnerContractsInner) Get() *StocksInnerContractsInner {
	return v.value
}

func (v *NullableStocksInnerContractsInner) Set(val *StocksInnerContractsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableStocksInnerContractsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableStocksInnerContractsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStocksInnerContractsInner(val *StocksInnerContractsInner) *NullableStocksInnerContractsInner {
	return &NullableStocksInnerContractsInner{value: val, isSet: true}
}

func (v NullableStocksInnerContractsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStocksInnerContractsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
