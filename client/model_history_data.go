/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the HistoryData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryData{}

// HistoryData struct for HistoryData
type HistoryData struct {
	// Underlying symbol
	Symbol *string `json:"symbol,omitempty"`
	// companyName
	Text *string `json:"text,omitempty"`
	// priceFactor is price increment obtained from display rule
	PriceFactor *int32 `json:"priceFactor,omitempty"`
	// start date time in the format YYYYMMDD-HH:mm:ss
	StartTime *string `json:"startTime,omitempty"`
	// High value during this time series with format %h/%v/%t. %h is the high price (scaled by priceFactor), %v is volume (volume factor will always be 100 (reported volume = actual volume/100)) and %t is minutes from start time of the chart
	High *string `json:"high,omitempty"`
	// Low value during this time series with format %l/%v/%t. %l is the low price (scaled by priceFactor), %v is volume (volume factor will always be 100 (reported volume = actual volume/100)) and %t is minutes from start time of the chart
	Low *string `json:"low,omitempty"`
	// The duration for the historical data request
	TimePeriod *string `json:"timePeriod,omitempty"`
	// The number of seconds in a bar
	BarLength *int32 `json:"barLength,omitempty"`
	// Market Data Availability. The field may contain two chars. The first char is the primary code: S = Streaming, R = Realtime, D = Delayed, Z = Frozen, Y = Frozen Delayed. The second char is the secondary code: P = Snapshot Available, p = Consolidated.
	MdAvailability *string `json:"mdAvailability,omitempty"`
	// The time it takes, in milliseconds, to process the historical data request
	MktDataDelay *int32 `json:"mktDataDelay,omitempty"`
	// The historical data returned includes outside of regular trading hours
	OutsideRth *bool `json:"outsideRth,omitempty"`
	// The number of seconds in the trading day
	TradingDayDuration *int32                 `json:"tradingDayDuration,omitempty"`
	VolumeFactor       *int32                 `json:"volumeFactor,omitempty"`
	PriceDisplayRule   *int32                 `json:"priceDisplayRule,omitempty"`
	PriceDisplayValue  *string                `json:"priceDisplayValue,omitempty"`
	NegativeCapable    *bool                  `json:"negativeCapable,omitempty"`
	MessageVersion     *int32                 `json:"messageVersion,omitempty"`
	Data               []HistoryDataDataInner `json:"data,omitempty"`
	// total number of points
	Points     *int32 `json:"points,omitempty"`
	TravelTime *int32 `json:"travelTime,omitempty"`
}

// NewHistoryData instantiates a new HistoryData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryData() *HistoryData {
	this := HistoryData{}
	return &this
}

// NewHistoryDataWithDefaults instantiates a new HistoryData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryDataWithDefaults() *HistoryData {
	this := HistoryData{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *HistoryData) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *HistoryData) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *HistoryData) SetSymbol(v string) {
	o.Symbol = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *HistoryData) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *HistoryData) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *HistoryData) SetText(v string) {
	o.Text = &v
}

// GetPriceFactor returns the PriceFactor field value if set, zero value otherwise.
func (o *HistoryData) GetPriceFactor() int32 {
	if o == nil || IsNil(o.PriceFactor) {
		var ret int32
		return ret
	}
	return *o.PriceFactor
}

// GetPriceFactorOk returns a tuple with the PriceFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetPriceFactorOk() (*int32, bool) {
	if o == nil || IsNil(o.PriceFactor) {
		return nil, false
	}
	return o.PriceFactor, true
}

// HasPriceFactor returns a boolean if a field has been set.
func (o *HistoryData) HasPriceFactor() bool {
	if o != nil && !IsNil(o.PriceFactor) {
		return true
	}

	return false
}

// SetPriceFactor gets a reference to the given int32 and assigns it to the PriceFactor field.
func (o *HistoryData) SetPriceFactor(v int32) {
	o.PriceFactor = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *HistoryData) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *HistoryData) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *HistoryData) SetStartTime(v string) {
	o.StartTime = &v
}

// GetHigh returns the High field value if set, zero value otherwise.
func (o *HistoryData) GetHigh() string {
	if o == nil || IsNil(o.High) {
		var ret string
		return ret
	}
	return *o.High
}

// GetHighOk returns a tuple with the High field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetHighOk() (*string, bool) {
	if o == nil || IsNil(o.High) {
		return nil, false
	}
	return o.High, true
}

// HasHigh returns a boolean if a field has been set.
func (o *HistoryData) HasHigh() bool {
	if o != nil && !IsNil(o.High) {
		return true
	}

	return false
}

// SetHigh gets a reference to the given string and assigns it to the High field.
func (o *HistoryData) SetHigh(v string) {
	o.High = &v
}

// GetLow returns the Low field value if set, zero value otherwise.
func (o *HistoryData) GetLow() string {
	if o == nil || IsNil(o.Low) {
		var ret string
		return ret
	}
	return *o.Low
}

// GetLowOk returns a tuple with the Low field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetLowOk() (*string, bool) {
	if o == nil || IsNil(o.Low) {
		return nil, false
	}
	return o.Low, true
}

// HasLow returns a boolean if a field has been set.
func (o *HistoryData) HasLow() bool {
	if o != nil && !IsNil(o.Low) {
		return true
	}

	return false
}

// SetLow gets a reference to the given string and assigns it to the Low field.
func (o *HistoryData) SetLow(v string) {
	o.Low = &v
}

// GetTimePeriod returns the TimePeriod field value if set, zero value otherwise.
func (o *HistoryData) GetTimePeriod() string {
	if o == nil || IsNil(o.TimePeriod) {
		var ret string
		return ret
	}
	return *o.TimePeriod
}

// GetTimePeriodOk returns a tuple with the TimePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetTimePeriodOk() (*string, bool) {
	if o == nil || IsNil(o.TimePeriod) {
		return nil, false
	}
	return o.TimePeriod, true
}

// HasTimePeriod returns a boolean if a field has been set.
func (o *HistoryData) HasTimePeriod() bool {
	if o != nil && !IsNil(o.TimePeriod) {
		return true
	}

	return false
}

// SetTimePeriod gets a reference to the given string and assigns it to the TimePeriod field.
func (o *HistoryData) SetTimePeriod(v string) {
	o.TimePeriod = &v
}

// GetBarLength returns the BarLength field value if set, zero value otherwise.
func (o *HistoryData) GetBarLength() int32 {
	if o == nil || IsNil(o.BarLength) {
		var ret int32
		return ret
	}
	return *o.BarLength
}

// GetBarLengthOk returns a tuple with the BarLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetBarLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.BarLength) {
		return nil, false
	}
	return o.BarLength, true
}

// HasBarLength returns a boolean if a field has been set.
func (o *HistoryData) HasBarLength() bool {
	if o != nil && !IsNil(o.BarLength) {
		return true
	}

	return false
}

// SetBarLength gets a reference to the given int32 and assigns it to the BarLength field.
func (o *HistoryData) SetBarLength(v int32) {
	o.BarLength = &v
}

// GetMdAvailability returns the MdAvailability field value if set, zero value otherwise.
func (o *HistoryData) GetMdAvailability() string {
	if o == nil || IsNil(o.MdAvailability) {
		var ret string
		return ret
	}
	return *o.MdAvailability
}

// GetMdAvailabilityOk returns a tuple with the MdAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetMdAvailabilityOk() (*string, bool) {
	if o == nil || IsNil(o.MdAvailability) {
		return nil, false
	}
	return o.MdAvailability, true
}

// HasMdAvailability returns a boolean if a field has been set.
func (o *HistoryData) HasMdAvailability() bool {
	if o != nil && !IsNil(o.MdAvailability) {
		return true
	}

	return false
}

// SetMdAvailability gets a reference to the given string and assigns it to the MdAvailability field.
func (o *HistoryData) SetMdAvailability(v string) {
	o.MdAvailability = &v
}

// GetMktDataDelay returns the MktDataDelay field value if set, zero value otherwise.
func (o *HistoryData) GetMktDataDelay() int32 {
	if o == nil || IsNil(o.MktDataDelay) {
		var ret int32
		return ret
	}
	return *o.MktDataDelay
}

// GetMktDataDelayOk returns a tuple with the MktDataDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetMktDataDelayOk() (*int32, bool) {
	if o == nil || IsNil(o.MktDataDelay) {
		return nil, false
	}
	return o.MktDataDelay, true
}

// HasMktDataDelay returns a boolean if a field has been set.
func (o *HistoryData) HasMktDataDelay() bool {
	if o != nil && !IsNil(o.MktDataDelay) {
		return true
	}

	return false
}

// SetMktDataDelay gets a reference to the given int32 and assigns it to the MktDataDelay field.
func (o *HistoryData) SetMktDataDelay(v int32) {
	o.MktDataDelay = &v
}

// GetOutsideRth returns the OutsideRth field value if set, zero value otherwise.
func (o *HistoryData) GetOutsideRth() bool {
	if o == nil || IsNil(o.OutsideRth) {
		var ret bool
		return ret
	}
	return *o.OutsideRth
}

// GetOutsideRthOk returns a tuple with the OutsideRth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetOutsideRthOk() (*bool, bool) {
	if o == nil || IsNil(o.OutsideRth) {
		return nil, false
	}
	return o.OutsideRth, true
}

// HasOutsideRth returns a boolean if a field has been set.
func (o *HistoryData) HasOutsideRth() bool {
	if o != nil && !IsNil(o.OutsideRth) {
		return true
	}

	return false
}

// SetOutsideRth gets a reference to the given bool and assigns it to the OutsideRth field.
func (o *HistoryData) SetOutsideRth(v bool) {
	o.OutsideRth = &v
}

// GetTradingDayDuration returns the TradingDayDuration field value if set, zero value otherwise.
func (o *HistoryData) GetTradingDayDuration() int32 {
	if o == nil || IsNil(o.TradingDayDuration) {
		var ret int32
		return ret
	}
	return *o.TradingDayDuration
}

// GetTradingDayDurationOk returns a tuple with the TradingDayDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetTradingDayDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.TradingDayDuration) {
		return nil, false
	}
	return o.TradingDayDuration, true
}

// HasTradingDayDuration returns a boolean if a field has been set.
func (o *HistoryData) HasTradingDayDuration() bool {
	if o != nil && !IsNil(o.TradingDayDuration) {
		return true
	}

	return false
}

// SetTradingDayDuration gets a reference to the given int32 and assigns it to the TradingDayDuration field.
func (o *HistoryData) SetTradingDayDuration(v int32) {
	o.TradingDayDuration = &v
}

// GetVolumeFactor returns the VolumeFactor field value if set, zero value otherwise.
func (o *HistoryData) GetVolumeFactor() int32 {
	if o == nil || IsNil(o.VolumeFactor) {
		var ret int32
		return ret
	}
	return *o.VolumeFactor
}

// GetVolumeFactorOk returns a tuple with the VolumeFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetVolumeFactorOk() (*int32, bool) {
	if o == nil || IsNil(o.VolumeFactor) {
		return nil, false
	}
	return o.VolumeFactor, true
}

// HasVolumeFactor returns a boolean if a field has been set.
func (o *HistoryData) HasVolumeFactor() bool {
	if o != nil && !IsNil(o.VolumeFactor) {
		return true
	}

	return false
}

// SetVolumeFactor gets a reference to the given int32 and assigns it to the VolumeFactor field.
func (o *HistoryData) SetVolumeFactor(v int32) {
	o.VolumeFactor = &v
}

// GetPriceDisplayRule returns the PriceDisplayRule field value if set, zero value otherwise.
func (o *HistoryData) GetPriceDisplayRule() int32 {
	if o == nil || IsNil(o.PriceDisplayRule) {
		var ret int32
		return ret
	}
	return *o.PriceDisplayRule
}

// GetPriceDisplayRuleOk returns a tuple with the PriceDisplayRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetPriceDisplayRuleOk() (*int32, bool) {
	if o == nil || IsNil(o.PriceDisplayRule) {
		return nil, false
	}
	return o.PriceDisplayRule, true
}

// HasPriceDisplayRule returns a boolean if a field has been set.
func (o *HistoryData) HasPriceDisplayRule() bool {
	if o != nil && !IsNil(o.PriceDisplayRule) {
		return true
	}

	return false
}

// SetPriceDisplayRule gets a reference to the given int32 and assigns it to the PriceDisplayRule field.
func (o *HistoryData) SetPriceDisplayRule(v int32) {
	o.PriceDisplayRule = &v
}

// GetPriceDisplayValue returns the PriceDisplayValue field value if set, zero value otherwise.
func (o *HistoryData) GetPriceDisplayValue() string {
	if o == nil || IsNil(o.PriceDisplayValue) {
		var ret string
		return ret
	}
	return *o.PriceDisplayValue
}

// GetPriceDisplayValueOk returns a tuple with the PriceDisplayValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetPriceDisplayValueOk() (*string, bool) {
	if o == nil || IsNil(o.PriceDisplayValue) {
		return nil, false
	}
	return o.PriceDisplayValue, true
}

// HasPriceDisplayValue returns a boolean if a field has been set.
func (o *HistoryData) HasPriceDisplayValue() bool {
	if o != nil && !IsNil(o.PriceDisplayValue) {
		return true
	}

	return false
}

// SetPriceDisplayValue gets a reference to the given string and assigns it to the PriceDisplayValue field.
func (o *HistoryData) SetPriceDisplayValue(v string) {
	o.PriceDisplayValue = &v
}

// GetNegativeCapable returns the NegativeCapable field value if set, zero value otherwise.
func (o *HistoryData) GetNegativeCapable() bool {
	if o == nil || IsNil(o.NegativeCapable) {
		var ret bool
		return ret
	}
	return *o.NegativeCapable
}

// GetNegativeCapableOk returns a tuple with the NegativeCapable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetNegativeCapableOk() (*bool, bool) {
	if o == nil || IsNil(o.NegativeCapable) {
		return nil, false
	}
	return o.NegativeCapable, true
}

// HasNegativeCapable returns a boolean if a field has been set.
func (o *HistoryData) HasNegativeCapable() bool {
	if o != nil && !IsNil(o.NegativeCapable) {
		return true
	}

	return false
}

// SetNegativeCapable gets a reference to the given bool and assigns it to the NegativeCapable field.
func (o *HistoryData) SetNegativeCapable(v bool) {
	o.NegativeCapable = &v
}

// GetMessageVersion returns the MessageVersion field value if set, zero value otherwise.
func (o *HistoryData) GetMessageVersion() int32 {
	if o == nil || IsNil(o.MessageVersion) {
		var ret int32
		return ret
	}
	return *o.MessageVersion
}

// GetMessageVersionOk returns a tuple with the MessageVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetMessageVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.MessageVersion) {
		return nil, false
	}
	return o.MessageVersion, true
}

// HasMessageVersion returns a boolean if a field has been set.
func (o *HistoryData) HasMessageVersion() bool {
	if o != nil && !IsNil(o.MessageVersion) {
		return true
	}

	return false
}

// SetMessageVersion gets a reference to the given int32 and assigns it to the MessageVersion field.
func (o *HistoryData) SetMessageVersion(v int32) {
	o.MessageVersion = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *HistoryData) GetData() []HistoryDataDataInner {
	if o == nil || IsNil(o.Data) {
		var ret []HistoryDataDataInner
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetDataOk() ([]HistoryDataDataInner, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *HistoryData) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []HistoryDataDataInner and assigns it to the Data field.
func (o *HistoryData) SetData(v []HistoryDataDataInner) {
	o.Data = v
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *HistoryData) GetPoints() int32 {
	if o == nil || IsNil(o.Points) {
		var ret int32
		return ret
	}
	return *o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetPointsOk() (*int32, bool) {
	if o == nil || IsNil(o.Points) {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *HistoryData) HasPoints() bool {
	if o != nil && !IsNil(o.Points) {
		return true
	}

	return false
}

// SetPoints gets a reference to the given int32 and assigns it to the Points field.
func (o *HistoryData) SetPoints(v int32) {
	o.Points = &v
}

// GetTravelTime returns the TravelTime field value if set, zero value otherwise.
func (o *HistoryData) GetTravelTime() int32 {
	if o == nil || IsNil(o.TravelTime) {
		var ret int32
		return ret
	}
	return *o.TravelTime
}

// GetTravelTimeOk returns a tuple with the TravelTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryData) GetTravelTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.TravelTime) {
		return nil, false
	}
	return o.TravelTime, true
}

// HasTravelTime returns a boolean if a field has been set.
func (o *HistoryData) HasTravelTime() bool {
	if o != nil && !IsNil(o.TravelTime) {
		return true
	}

	return false
}

// SetTravelTime gets a reference to the given int32 and assigns it to the TravelTime field.
func (o *HistoryData) SetTravelTime(v int32) {
	o.TravelTime = &v
}

func (o HistoryData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.PriceFactor) {
		toSerialize["priceFactor"] = o.PriceFactor
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.High) {
		toSerialize["high"] = o.High
	}
	if !IsNil(o.Low) {
		toSerialize["low"] = o.Low
	}
	if !IsNil(o.TimePeriod) {
		toSerialize["timePeriod"] = o.TimePeriod
	}
	if !IsNil(o.BarLength) {
		toSerialize["barLength"] = o.BarLength
	}
	if !IsNil(o.MdAvailability) {
		toSerialize["mdAvailability"] = o.MdAvailability
	}
	if !IsNil(o.MktDataDelay) {
		toSerialize["mktDataDelay"] = o.MktDataDelay
	}
	if !IsNil(o.OutsideRth) {
		toSerialize["outsideRth"] = o.OutsideRth
	}
	if !IsNil(o.TradingDayDuration) {
		toSerialize["tradingDayDuration"] = o.TradingDayDuration
	}
	if !IsNil(o.VolumeFactor) {
		toSerialize["volumeFactor"] = o.VolumeFactor
	}
	if !IsNil(o.PriceDisplayRule) {
		toSerialize["priceDisplayRule"] = o.PriceDisplayRule
	}
	if !IsNil(o.PriceDisplayValue) {
		toSerialize["priceDisplayValue"] = o.PriceDisplayValue
	}
	if !IsNil(o.NegativeCapable) {
		toSerialize["negativeCapable"] = o.NegativeCapable
	}
	if !IsNil(o.MessageVersion) {
		toSerialize["messageVersion"] = o.MessageVersion
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Points) {
		toSerialize["points"] = o.Points
	}
	if !IsNil(o.TravelTime) {
		toSerialize["travelTime"] = o.TravelTime
	}
	return toSerialize, nil
}

type NullableHistoryData struct {
	value *HistoryData
	isSet bool
}

func (v NullableHistoryData) Get() *HistoryData {
	return v.value
}

func (v *NullableHistoryData) Set(val *HistoryData) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryData) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryData(val *HistoryData) *NullableHistoryData {
	return &NullableHistoryData{value: val, isSet: true}
}

func (v NullableHistoryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
