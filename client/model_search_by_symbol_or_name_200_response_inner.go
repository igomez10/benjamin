/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the SearchBySymbolOrName200ResponseInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchBySymbolOrName200ResponseInner{}

// SearchBySymbolOrName200ResponseInner struct for SearchBySymbolOrName200ResponseInner
type SearchBySymbolOrName200ResponseInner struct {
	// Contract Identifier
	Conid *int32 `json:"conid,omitempty"`
	// Company Name - Exchange
	CompanyHeader *string `json:"companyHeader,omitempty"`
	CompanyName   *string `json:"companyName,omitempty"`
	// Underlying symbol
	Symbol *string `json:"symbol,omitempty"`
	// Exchange
	Description *string `json:"description,omitempty"`
	Restricted  *string `json:"restricted,omitempty"`
	// List of Future Option expirations in YYYMMDD format separated by semicolon
	Fop *string `json:"fop,omitempty"`
	// List of Option expirations in YYYYMMDD format separated by semicolon
	Opt *string `json:"opt,omitempty"`
	// List of Warrant expirations in YYYYMMDD format separated by semicolon
	War      *string                                             `json:"war,omitempty"`
	Sections []SearchBySymbolOrName200ResponseInnerSectionsInner `json:"sections,omitempty"`
}

// NewSearchBySymbolOrName200ResponseInner instantiates a new SearchBySymbolOrName200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchBySymbolOrName200ResponseInner() *SearchBySymbolOrName200ResponseInner {
	this := SearchBySymbolOrName200ResponseInner{}
	return &this
}

// NewSearchBySymbolOrName200ResponseInnerWithDefaults instantiates a new SearchBySymbolOrName200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchBySymbolOrName200ResponseInnerWithDefaults() *SearchBySymbolOrName200ResponseInner {
	this := SearchBySymbolOrName200ResponseInner{}
	return &this
}

// GetConid returns the Conid field value if set, zero value otherwise.
func (o *SearchBySymbolOrName200ResponseInner) GetConid() int32 {
	if o == nil || IsNil(o.Conid) {
		var ret int32
		return ret
	}
	return *o.Conid
}

// GetConidOk returns a tuple with the Conid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBySymbolOrName200ResponseInner) GetConidOk() (*int32, bool) {
	if o == nil || IsNil(o.Conid) {
		return nil, false
	}
	return o.Conid, true
}

// HasConid returns a boolean if a field has been set.
func (o *SearchBySymbolOrName200ResponseInner) HasConid() bool {
	if o != nil && !IsNil(o.Conid) {
		return true
	}

	return false
}

// SetConid gets a reference to the given int32 and assigns it to the Conid field.
func (o *SearchBySymbolOrName200ResponseInner) SetConid(v int32) {
	o.Conid = &v
}

// GetCompanyHeader returns the CompanyHeader field value if set, zero value otherwise.
func (o *SearchBySymbolOrName200ResponseInner) GetCompanyHeader() string {
	if o == nil || IsNil(o.CompanyHeader) {
		var ret string
		return ret
	}
	return *o.CompanyHeader
}

// GetCompanyHeaderOk returns a tuple with the CompanyHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBySymbolOrName200ResponseInner) GetCompanyHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyHeader) {
		return nil, false
	}
	return o.CompanyHeader, true
}

// HasCompanyHeader returns a boolean if a field has been set.
func (o *SearchBySymbolOrName200ResponseInner) HasCompanyHeader() bool {
	if o != nil && !IsNil(o.CompanyHeader) {
		return true
	}

	return false
}

// SetCompanyHeader gets a reference to the given string and assigns it to the CompanyHeader field.
func (o *SearchBySymbolOrName200ResponseInner) SetCompanyHeader(v string) {
	o.CompanyHeader = &v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *SearchBySymbolOrName200ResponseInner) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBySymbolOrName200ResponseInner) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *SearchBySymbolOrName200ResponseInner) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *SearchBySymbolOrName200ResponseInner) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *SearchBySymbolOrName200ResponseInner) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBySymbolOrName200ResponseInner) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *SearchBySymbolOrName200ResponseInner) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *SearchBySymbolOrName200ResponseInner) SetSymbol(v string) {
	o.Symbol = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SearchBySymbolOrName200ResponseInner) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBySymbolOrName200ResponseInner) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SearchBySymbolOrName200ResponseInner) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SearchBySymbolOrName200ResponseInner) SetDescription(v string) {
	o.Description = &v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise.
func (o *SearchBySymbolOrName200ResponseInner) GetRestricted() string {
	if o == nil || IsNil(o.Restricted) {
		var ret string
		return ret
	}
	return *o.Restricted
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBySymbolOrName200ResponseInner) GetRestrictedOk() (*string, bool) {
	if o == nil || IsNil(o.Restricted) {
		return nil, false
	}
	return o.Restricted, true
}

// HasRestricted returns a boolean if a field has been set.
func (o *SearchBySymbolOrName200ResponseInner) HasRestricted() bool {
	if o != nil && !IsNil(o.Restricted) {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given string and assigns it to the Restricted field.
func (o *SearchBySymbolOrName200ResponseInner) SetRestricted(v string) {
	o.Restricted = &v
}

// GetFop returns the Fop field value if set, zero value otherwise.
func (o *SearchBySymbolOrName200ResponseInner) GetFop() string {
	if o == nil || IsNil(o.Fop) {
		var ret string
		return ret
	}
	return *o.Fop
}

// GetFopOk returns a tuple with the Fop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBySymbolOrName200ResponseInner) GetFopOk() (*string, bool) {
	if o == nil || IsNil(o.Fop) {
		return nil, false
	}
	return o.Fop, true
}

// HasFop returns a boolean if a field has been set.
func (o *SearchBySymbolOrName200ResponseInner) HasFop() bool {
	if o != nil && !IsNil(o.Fop) {
		return true
	}

	return false
}

// SetFop gets a reference to the given string and assigns it to the Fop field.
func (o *SearchBySymbolOrName200ResponseInner) SetFop(v string) {
	o.Fop = &v
}

// GetOpt returns the Opt field value if set, zero value otherwise.
func (o *SearchBySymbolOrName200ResponseInner) GetOpt() string {
	if o == nil || IsNil(o.Opt) {
		var ret string
		return ret
	}
	return *o.Opt
}

// GetOptOk returns a tuple with the Opt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBySymbolOrName200ResponseInner) GetOptOk() (*string, bool) {
	if o == nil || IsNil(o.Opt) {
		return nil, false
	}
	return o.Opt, true
}

// HasOpt returns a boolean if a field has been set.
func (o *SearchBySymbolOrName200ResponseInner) HasOpt() bool {
	if o != nil && !IsNil(o.Opt) {
		return true
	}

	return false
}

// SetOpt gets a reference to the given string and assigns it to the Opt field.
func (o *SearchBySymbolOrName200ResponseInner) SetOpt(v string) {
	o.Opt = &v
}

// GetWar returns the War field value if set, zero value otherwise.
func (o *SearchBySymbolOrName200ResponseInner) GetWar() string {
	if o == nil || IsNil(o.War) {
		var ret string
		return ret
	}
	return *o.War
}

// GetWarOk returns a tuple with the War field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBySymbolOrName200ResponseInner) GetWarOk() (*string, bool) {
	if o == nil || IsNil(o.War) {
		return nil, false
	}
	return o.War, true
}

// HasWar returns a boolean if a field has been set.
func (o *SearchBySymbolOrName200ResponseInner) HasWar() bool {
	if o != nil && !IsNil(o.War) {
		return true
	}

	return false
}

// SetWar gets a reference to the given string and assigns it to the War field.
func (o *SearchBySymbolOrName200ResponseInner) SetWar(v string) {
	o.War = &v
}

// GetSections returns the Sections field value if set, zero value otherwise.
func (o *SearchBySymbolOrName200ResponseInner) GetSections() []SearchBySymbolOrName200ResponseInnerSectionsInner {
	if o == nil || IsNil(o.Sections) {
		var ret []SearchBySymbolOrName200ResponseInnerSectionsInner
		return ret
	}
	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBySymbolOrName200ResponseInner) GetSectionsOk() ([]SearchBySymbolOrName200ResponseInnerSectionsInner, bool) {
	if o == nil || IsNil(o.Sections) {
		return nil, false
	}
	return o.Sections, true
}

// HasSections returns a boolean if a field has been set.
func (o *SearchBySymbolOrName200ResponseInner) HasSections() bool {
	if o != nil && !IsNil(o.Sections) {
		return true
	}

	return false
}

// SetSections gets a reference to the given []SearchBySymbolOrName200ResponseInnerSectionsInner and assigns it to the Sections field.
func (o *SearchBySymbolOrName200ResponseInner) SetSections(v []SearchBySymbolOrName200ResponseInnerSectionsInner) {
	o.Sections = v
}

func (o SearchBySymbolOrName200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchBySymbolOrName200ResponseInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conid) {
		toSerialize["conid"] = o.Conid
	}
	if !IsNil(o.CompanyHeader) {
		toSerialize["companyHeader"] = o.CompanyHeader
	}
	if !IsNil(o.CompanyName) {
		toSerialize["companyName"] = o.CompanyName
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Restricted) {
		toSerialize["restricted"] = o.Restricted
	}
	if !IsNil(o.Fop) {
		toSerialize["fop"] = o.Fop
	}
	if !IsNil(o.Opt) {
		toSerialize["opt"] = o.Opt
	}
	if !IsNil(o.War) {
		toSerialize["war"] = o.War
	}
	if !IsNil(o.Sections) {
		toSerialize["sections"] = o.Sections
	}
	return toSerialize, nil
}

type NullableSearchBySymbolOrName200ResponseInner struct {
	value *SearchBySymbolOrName200ResponseInner
	isSet bool
}

func (v NullableSearchBySymbolOrName200ResponseInner) Get() *SearchBySymbolOrName200ResponseInner {
	return v.value
}

func (v *NullableSearchBySymbolOrName200ResponseInner) Set(val *SearchBySymbolOrName200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchBySymbolOrName200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchBySymbolOrName200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchBySymbolOrName200ResponseInner(val *SearchBySymbolOrName200ResponseInner) *NullableSearchBySymbolOrName200ResponseInner {
	return &NullableSearchBySymbolOrName200ResponseInner{value: val, isSet: true}
}

func (v NullableSearchBySymbolOrName200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchBySymbolOrName200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
