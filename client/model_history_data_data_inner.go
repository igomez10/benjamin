/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the HistoryDataDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryDataDataInner{}

// HistoryDataDataInner struct for HistoryDataDataInner
type HistoryDataDataInner struct {
	// open price
	O *float32 `json:"o,omitempty"`
	// close price
	C *float32 `json:"c,omitempty"`
	// high price
	H *float32 `json:"h,omitempty"`
	// low price
	L *float32 `json:"l,omitempty"`
	// volume
	V *float32 `json:"v,omitempty"`
	// unix time stamp
	T *float32 `json:"t,omitempty"`
}

// NewHistoryDataDataInner instantiates a new HistoryDataDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryDataDataInner() *HistoryDataDataInner {
	this := HistoryDataDataInner{}
	return &this
}

// NewHistoryDataDataInnerWithDefaults instantiates a new HistoryDataDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryDataDataInnerWithDefaults() *HistoryDataDataInner {
	this := HistoryDataDataInner{}
	return &this
}

// GetO returns the O field value if set, zero value otherwise.
func (o *HistoryDataDataInner) GetO() float32 {
	if o == nil || IsNil(o.O) {
		var ret float32
		return ret
	}
	return *o.O
}

// GetOOk returns a tuple with the O field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryDataDataInner) GetOOk() (*float32, bool) {
	if o == nil || IsNil(o.O) {
		return nil, false
	}
	return o.O, true
}

// HasO returns a boolean if a field has been set.
func (o *HistoryDataDataInner) HasO() bool {
	if o != nil && !IsNil(o.O) {
		return true
	}

	return false
}

// SetO gets a reference to the given float32 and assigns it to the O field.
func (o *HistoryDataDataInner) SetO(v float32) {
	o.O = &v
}

// GetC returns the C field value if set, zero value otherwise.
func (o *HistoryDataDataInner) GetC() float32 {
	if o == nil || IsNil(o.C) {
		var ret float32
		return ret
	}
	return *o.C
}

// GetCOk returns a tuple with the C field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryDataDataInner) GetCOk() (*float32, bool) {
	if o == nil || IsNil(o.C) {
		return nil, false
	}
	return o.C, true
}

// HasC returns a boolean if a field has been set.
func (o *HistoryDataDataInner) HasC() bool {
	if o != nil && !IsNil(o.C) {
		return true
	}

	return false
}

// SetC gets a reference to the given float32 and assigns it to the C field.
func (o *HistoryDataDataInner) SetC(v float32) {
	o.C = &v
}

// GetH returns the H field value if set, zero value otherwise.
func (o *HistoryDataDataInner) GetH() float32 {
	if o == nil || IsNil(o.H) {
		var ret float32
		return ret
	}
	return *o.H
}

// GetHOk returns a tuple with the H field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryDataDataInner) GetHOk() (*float32, bool) {
	if o == nil || IsNil(o.H) {
		return nil, false
	}
	return o.H, true
}

// HasH returns a boolean if a field has been set.
func (o *HistoryDataDataInner) HasH() bool {
	if o != nil && !IsNil(o.H) {
		return true
	}

	return false
}

// SetH gets a reference to the given float32 and assigns it to the H field.
func (o *HistoryDataDataInner) SetH(v float32) {
	o.H = &v
}

// GetL returns the L field value if set, zero value otherwise.
func (o *HistoryDataDataInner) GetL() float32 {
	if o == nil || IsNil(o.L) {
		var ret float32
		return ret
	}
	return *o.L
}

// GetLOk returns a tuple with the L field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryDataDataInner) GetLOk() (*float32, bool) {
	if o == nil || IsNil(o.L) {
		return nil, false
	}
	return o.L, true
}

// HasL returns a boolean if a field has been set.
func (o *HistoryDataDataInner) HasL() bool {
	if o != nil && !IsNil(o.L) {
		return true
	}

	return false
}

// SetL gets a reference to the given float32 and assigns it to the L field.
func (o *HistoryDataDataInner) SetL(v float32) {
	o.L = &v
}

// GetV returns the V field value if set, zero value otherwise.
func (o *HistoryDataDataInner) GetV() float32 {
	if o == nil || IsNil(o.V) {
		var ret float32
		return ret
	}
	return *o.V
}

// GetVOk returns a tuple with the V field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryDataDataInner) GetVOk() (*float32, bool) {
	if o == nil || IsNil(o.V) {
		return nil, false
	}
	return o.V, true
}

// HasV returns a boolean if a field has been set.
func (o *HistoryDataDataInner) HasV() bool {
	if o != nil && !IsNil(o.V) {
		return true
	}

	return false
}

// SetV gets a reference to the given float32 and assigns it to the V field.
func (o *HistoryDataDataInner) SetV(v float32) {
	o.V = &v
}

// GetT returns the T field value if set, zero value otherwise.
func (o *HistoryDataDataInner) GetT() float32 {
	if o == nil || IsNil(o.T) {
		var ret float32
		return ret
	}
	return *o.T
}

// GetTOk returns a tuple with the T field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryDataDataInner) GetTOk() (*float32, bool) {
	if o == nil || IsNil(o.T) {
		return nil, false
	}
	return o.T, true
}

// HasT returns a boolean if a field has been set.
func (o *HistoryDataDataInner) HasT() bool {
	if o != nil && !IsNil(o.T) {
		return true
	}

	return false
}

// SetT gets a reference to the given float32 and assigns it to the T field.
func (o *HistoryDataDataInner) SetT(v float32) {
	o.T = &v
}

func (o HistoryDataDataInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryDataDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.O) {
		toSerialize["o"] = o.O
	}
	if !IsNil(o.C) {
		toSerialize["c"] = o.C
	}
	if !IsNil(o.H) {
		toSerialize["h"] = o.H
	}
	if !IsNil(o.L) {
		toSerialize["l"] = o.L
	}
	if !IsNil(o.V) {
		toSerialize["v"] = o.V
	}
	if !IsNil(o.T) {
		toSerialize["t"] = o.T
	}
	return toSerialize, nil
}

type NullableHistoryDataDataInner struct {
	value *HistoryDataDataInner
	isSet bool
}

func (v NullableHistoryDataDataInner) Get() *HistoryDataDataInner {
	return v.value
}

func (v *NullableHistoryDataDataInner) Set(val *HistoryDataDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryDataDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryDataDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryDataDataInner(val *HistoryDataDataInner) *NullableHistoryDataDataInner {
	return &NullableHistoryDataDataInner{value: val, isSet: true}
}

func (v NullableHistoryDataDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryDataDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
