/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the IndsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndsInner{}

// IndsInner struct for IndsInner
type IndsInner struct {
	Conid *float32 `json:"conid,omitempty"`
}

// NewIndsInner instantiates a new IndsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndsInner() *IndsInner {
	this := IndsInner{}
	return &this
}

// NewIndsInnerWithDefaults instantiates a new IndsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndsInnerWithDefaults() *IndsInner {
	this := IndsInner{}
	return &this
}

// GetConid returns the Conid field value if set, zero value otherwise.
func (o *IndsInner) GetConid() float32 {
	if o == nil || IsNil(o.Conid) {
		var ret float32
		return ret
	}
	return *o.Conid
}

// GetConidOk returns a tuple with the Conid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndsInner) GetConidOk() (*float32, bool) {
	if o == nil || IsNil(o.Conid) {
		return nil, false
	}
	return o.Conid, true
}

// HasConid returns a boolean if a field has been set.
func (o *IndsInner) HasConid() bool {
	if o != nil && !IsNil(o.Conid) {
		return true
	}

	return false
}

// SetConid gets a reference to the given float32 and assigns it to the Conid field.
func (o *IndsInner) SetConid(v float32) {
	o.Conid = &v
}

func (o IndsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conid) {
		toSerialize["conid"] = o.Conid
	}
	return toSerialize, nil
}

type NullableIndsInner struct {
	value *IndsInner
	isSet bool
}

func (v NullableIndsInner) Get() *IndsInner {
	return v.value
}

func (v *NullableIndsInner) Set(val *IndsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableIndsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableIndsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndsInner(val *IndsInner) *NullableIndsInner {
	return &NullableIndsInner{value: val, isSet: true}
}

func (v NullableIndsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
