/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SearchBySymbolOrNameRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchBySymbolOrNameRequest{}

// SearchBySymbolOrNameRequest struct for SearchBySymbolOrNameRequest
type SearchBySymbolOrNameRequest struct {
	// symbol or name to be searched
	Symbol string `json:"symbol"`
	// should be true if the search is to be performed by name. false by default.
	Name *bool `json:"name,omitempty"`
	// If search is done by name, only the assets provided in this field will be returned. Currently, only STK is supported.
	SecType *string `json:"secType,omitempty"`
}

type _SearchBySymbolOrNameRequest SearchBySymbolOrNameRequest

// NewSearchBySymbolOrNameRequest instantiates a new SearchBySymbolOrNameRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchBySymbolOrNameRequest(symbol string) *SearchBySymbolOrNameRequest {
	this := SearchBySymbolOrNameRequest{}
	this.Symbol = symbol
	return &this
}

// NewSearchBySymbolOrNameRequestWithDefaults instantiates a new SearchBySymbolOrNameRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchBySymbolOrNameRequestWithDefaults() *SearchBySymbolOrNameRequest {
	this := SearchBySymbolOrNameRequest{}
	return &this
}

// GetSymbol returns the Symbol field value
func (o *SearchBySymbolOrNameRequest) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *SearchBySymbolOrNameRequest) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *SearchBySymbolOrNameRequest) SetSymbol(v string) {
	o.Symbol = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SearchBySymbolOrNameRequest) GetName() bool {
	if o == nil || IsNil(o.Name) {
		var ret bool
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBySymbolOrNameRequest) GetNameOk() (*bool, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SearchBySymbolOrNameRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given bool and assigns it to the Name field.
func (o *SearchBySymbolOrNameRequest) SetName(v bool) {
	o.Name = &v
}

// GetSecType returns the SecType field value if set, zero value otherwise.
func (o *SearchBySymbolOrNameRequest) GetSecType() string {
	if o == nil || IsNil(o.SecType) {
		var ret string
		return ret
	}
	return *o.SecType
}

// GetSecTypeOk returns a tuple with the SecType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBySymbolOrNameRequest) GetSecTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SecType) {
		return nil, false
	}
	return o.SecType, true
}

// HasSecType returns a boolean if a field has been set.
func (o *SearchBySymbolOrNameRequest) HasSecType() bool {
	if o != nil && !IsNil(o.SecType) {
		return true
	}

	return false
}

// SetSecType gets a reference to the given string and assigns it to the SecType field.
func (o *SearchBySymbolOrNameRequest) SetSecType(v string) {
	o.SecType = &v
}

func (o SearchBySymbolOrNameRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchBySymbolOrNameRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["symbol"] = o.Symbol
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SecType) {
		toSerialize["secType"] = o.SecType
	}
	return toSerialize, nil
}

func (o *SearchBySymbolOrNameRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"symbol",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchBySymbolOrNameRequest := _SearchBySymbolOrNameRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchBySymbolOrNameRequest)

	if err != nil {
		return err
	}

	*o = SearchBySymbolOrNameRequest(varSearchBySymbolOrNameRequest)

	return err
}

type NullableSearchBySymbolOrNameRequest struct {
	value *SearchBySymbolOrNameRequest
	isSet bool
}

func (v NullableSearchBySymbolOrNameRequest) Get() *SearchBySymbolOrNameRequest {
	return v.value
}

func (v *NullableSearchBySymbolOrNameRequest) Set(val *SearchBySymbolOrNameRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchBySymbolOrNameRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchBySymbolOrNameRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchBySymbolOrNameRequest(val *SearchBySymbolOrNameRequest) *NullableSearchBySymbolOrNameRequest {
	return &NullableSearchBySymbolOrNameRequest{value: val, isSet: true}
}

func (v NullableSearchBySymbolOrNameRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchBySymbolOrNameRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
