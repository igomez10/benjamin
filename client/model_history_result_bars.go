/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the HistoryResultBars type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryResultBars{}

// HistoryResultBars struct for HistoryResultBars
type HistoryResultBars struct {
	// First price returned for bar value.
	Open *float32 `json:"open,omitempty"`
	// Start Time in the format YYYYMMDD.
	StartTime *string `json:"startTime,omitempty"`
	// Start Time Value - Formatted in unix time in ms.
	StartTimeVal *int32 `json:"startTimeVal,omitempty"`
	// End Time in the format YYYYMMDD.
	EndTime *string `json:"endTime,omitempty"`
	// End Time Value - Formatted in unix time in ms.
	EndTimeVal *int32 `json:"endTimeVal,omitempty"`
	// total number of data points.
	Points *int32                       `json:"points,omitempty"`
	Data   []HistoryResultBarsDataInner `json:"data,omitempty"`
	// If 0 then data is returned in real time. Otherwise will return the number of seconds history data is delayed.
	MktDataDelay *int32 `json:"mktDataDelay,omitempty"`
}

// NewHistoryResultBars instantiates a new HistoryResultBars object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryResultBars() *HistoryResultBars {
	this := HistoryResultBars{}
	return &this
}

// NewHistoryResultBarsWithDefaults instantiates a new HistoryResultBars object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryResultBarsWithDefaults() *HistoryResultBars {
	this := HistoryResultBars{}
	return &this
}

// GetOpen returns the Open field value if set, zero value otherwise.
func (o *HistoryResultBars) GetOpen() float32 {
	if o == nil || IsNil(o.Open) {
		var ret float32
		return ret
	}
	return *o.Open
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryResultBars) GetOpenOk() (*float32, bool) {
	if o == nil || IsNil(o.Open) {
		return nil, false
	}
	return o.Open, true
}

// HasOpen returns a boolean if a field has been set.
func (o *HistoryResultBars) HasOpen() bool {
	if o != nil && !IsNil(o.Open) {
		return true
	}

	return false
}

// SetOpen gets a reference to the given float32 and assigns it to the Open field.
func (o *HistoryResultBars) SetOpen(v float32) {
	o.Open = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *HistoryResultBars) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryResultBars) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *HistoryResultBars) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *HistoryResultBars) SetStartTime(v string) {
	o.StartTime = &v
}

// GetStartTimeVal returns the StartTimeVal field value if set, zero value otherwise.
func (o *HistoryResultBars) GetStartTimeVal() int32 {
	if o == nil || IsNil(o.StartTimeVal) {
		var ret int32
		return ret
	}
	return *o.StartTimeVal
}

// GetStartTimeValOk returns a tuple with the StartTimeVal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryResultBars) GetStartTimeValOk() (*int32, bool) {
	if o == nil || IsNil(o.StartTimeVal) {
		return nil, false
	}
	return o.StartTimeVal, true
}

// HasStartTimeVal returns a boolean if a field has been set.
func (o *HistoryResultBars) HasStartTimeVal() bool {
	if o != nil && !IsNil(o.StartTimeVal) {
		return true
	}

	return false
}

// SetStartTimeVal gets a reference to the given int32 and assigns it to the StartTimeVal field.
func (o *HistoryResultBars) SetStartTimeVal(v int32) {
	o.StartTimeVal = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *HistoryResultBars) GetEndTime() string {
	if o == nil || IsNil(o.EndTime) {
		var ret string
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryResultBars) GetEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *HistoryResultBars) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given string and assigns it to the EndTime field.
func (o *HistoryResultBars) SetEndTime(v string) {
	o.EndTime = &v
}

// GetEndTimeVal returns the EndTimeVal field value if set, zero value otherwise.
func (o *HistoryResultBars) GetEndTimeVal() int32 {
	if o == nil || IsNil(o.EndTimeVal) {
		var ret int32
		return ret
	}
	return *o.EndTimeVal
}

// GetEndTimeValOk returns a tuple with the EndTimeVal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryResultBars) GetEndTimeValOk() (*int32, bool) {
	if o == nil || IsNil(o.EndTimeVal) {
		return nil, false
	}
	return o.EndTimeVal, true
}

// HasEndTimeVal returns a boolean if a field has been set.
func (o *HistoryResultBars) HasEndTimeVal() bool {
	if o != nil && !IsNil(o.EndTimeVal) {
		return true
	}

	return false
}

// SetEndTimeVal gets a reference to the given int32 and assigns it to the EndTimeVal field.
func (o *HistoryResultBars) SetEndTimeVal(v int32) {
	o.EndTimeVal = &v
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *HistoryResultBars) GetPoints() int32 {
	if o == nil || IsNil(o.Points) {
		var ret int32
		return ret
	}
	return *o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryResultBars) GetPointsOk() (*int32, bool) {
	if o == nil || IsNil(o.Points) {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *HistoryResultBars) HasPoints() bool {
	if o != nil && !IsNil(o.Points) {
		return true
	}

	return false
}

// SetPoints gets a reference to the given int32 and assigns it to the Points field.
func (o *HistoryResultBars) SetPoints(v int32) {
	o.Points = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *HistoryResultBars) GetData() []HistoryResultBarsDataInner {
	if o == nil || IsNil(o.Data) {
		var ret []HistoryResultBarsDataInner
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryResultBars) GetDataOk() ([]HistoryResultBarsDataInner, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *HistoryResultBars) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []HistoryResultBarsDataInner and assigns it to the Data field.
func (o *HistoryResultBars) SetData(v []HistoryResultBarsDataInner) {
	o.Data = v
}

// GetMktDataDelay returns the MktDataDelay field value if set, zero value otherwise.
func (o *HistoryResultBars) GetMktDataDelay() int32 {
	if o == nil || IsNil(o.MktDataDelay) {
		var ret int32
		return ret
	}
	return *o.MktDataDelay
}

// GetMktDataDelayOk returns a tuple with the MktDataDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryResultBars) GetMktDataDelayOk() (*int32, bool) {
	if o == nil || IsNil(o.MktDataDelay) {
		return nil, false
	}
	return o.MktDataDelay, true
}

// HasMktDataDelay returns a boolean if a field has been set.
func (o *HistoryResultBars) HasMktDataDelay() bool {
	if o != nil && !IsNil(o.MktDataDelay) {
		return true
	}

	return false
}

// SetMktDataDelay gets a reference to the given int32 and assigns it to the MktDataDelay field.
func (o *HistoryResultBars) SetMktDataDelay(v int32) {
	o.MktDataDelay = &v
}

func (o HistoryResultBars) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryResultBars) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Open) {
		toSerialize["open"] = o.Open
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.StartTimeVal) {
		toSerialize["startTimeVal"] = o.StartTimeVal
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.EndTimeVal) {
		toSerialize["endTimeVal"] = o.EndTimeVal
	}
	if !IsNil(o.Points) {
		toSerialize["points"] = o.Points
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.MktDataDelay) {
		toSerialize["mktDataDelay"] = o.MktDataDelay
	}
	return toSerialize, nil
}

type NullableHistoryResultBars struct {
	value *HistoryResultBars
	isSet bool
}

func (v NullableHistoryResultBars) Get() *HistoryResultBars {
	return v.value
}

func (v *NullableHistoryResultBars) Set(val *HistoryResultBars) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryResultBars) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryResultBars) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryResultBars(val *HistoryResultBars) *NullableHistoryResultBars {
	return &NullableHistoryResultBars{value: val, isSet: true}
}

func (v NullableHistoryResultBars) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryResultBars) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
