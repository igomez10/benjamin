/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the RunScannerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunScannerRequest{}

// RunScannerRequest struct for RunScannerRequest
type RunScannerRequest struct {
	Instrument *string                         `json:"instrument,omitempty"`
	Locations  *string                         `json:"locations,omitempty"`
	ScanCode   *string                         `json:"scanCode,omitempty"`
	SecType    *string                         `json:"secType,omitempty"`
	Filters    []RunScannerRequestFiltersInner `json:"filters,omitempty"`
}

// NewRunScannerRequest instantiates a new RunScannerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunScannerRequest() *RunScannerRequest {
	this := RunScannerRequest{}
	return &this
}

// NewRunScannerRequestWithDefaults instantiates a new RunScannerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunScannerRequestWithDefaults() *RunScannerRequest {
	this := RunScannerRequest{}
	return &this
}

// GetInstrument returns the Instrument field value if set, zero value otherwise.
func (o *RunScannerRequest) GetInstrument() string {
	if o == nil || IsNil(o.Instrument) {
		var ret string
		return ret
	}
	return *o.Instrument
}

// GetInstrumentOk returns a tuple with the Instrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunScannerRequest) GetInstrumentOk() (*string, bool) {
	if o == nil || IsNil(o.Instrument) {
		return nil, false
	}
	return o.Instrument, true
}

// HasInstrument returns a boolean if a field has been set.
func (o *RunScannerRequest) HasInstrument() bool {
	if o != nil && !IsNil(o.Instrument) {
		return true
	}

	return false
}

// SetInstrument gets a reference to the given string and assigns it to the Instrument field.
func (o *RunScannerRequest) SetInstrument(v string) {
	o.Instrument = &v
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *RunScannerRequest) GetLocations() string {
	if o == nil || IsNil(o.Locations) {
		var ret string
		return ret
	}
	return *o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunScannerRequest) GetLocationsOk() (*string, bool) {
	if o == nil || IsNil(o.Locations) {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *RunScannerRequest) HasLocations() bool {
	if o != nil && !IsNil(o.Locations) {
		return true
	}

	return false
}

// SetLocations gets a reference to the given string and assigns it to the Locations field.
func (o *RunScannerRequest) SetLocations(v string) {
	o.Locations = &v
}

// GetScanCode returns the ScanCode field value if set, zero value otherwise.
func (o *RunScannerRequest) GetScanCode() string {
	if o == nil || IsNil(o.ScanCode) {
		var ret string
		return ret
	}
	return *o.ScanCode
}

// GetScanCodeOk returns a tuple with the ScanCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunScannerRequest) GetScanCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ScanCode) {
		return nil, false
	}
	return o.ScanCode, true
}

// HasScanCode returns a boolean if a field has been set.
func (o *RunScannerRequest) HasScanCode() bool {
	if o != nil && !IsNil(o.ScanCode) {
		return true
	}

	return false
}

// SetScanCode gets a reference to the given string and assigns it to the ScanCode field.
func (o *RunScannerRequest) SetScanCode(v string) {
	o.ScanCode = &v
}

// GetSecType returns the SecType field value if set, zero value otherwise.
func (o *RunScannerRequest) GetSecType() string {
	if o == nil || IsNil(o.SecType) {
		var ret string
		return ret
	}
	return *o.SecType
}

// GetSecTypeOk returns a tuple with the SecType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunScannerRequest) GetSecTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SecType) {
		return nil, false
	}
	return o.SecType, true
}

// HasSecType returns a boolean if a field has been set.
func (o *RunScannerRequest) HasSecType() bool {
	if o != nil && !IsNil(o.SecType) {
		return true
	}

	return false
}

// SetSecType gets a reference to the given string and assigns it to the SecType field.
func (o *RunScannerRequest) SetSecType(v string) {
	o.SecType = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *RunScannerRequest) GetFilters() []RunScannerRequestFiltersInner {
	if o == nil || IsNil(o.Filters) {
		var ret []RunScannerRequestFiltersInner
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunScannerRequest) GetFiltersOk() ([]RunScannerRequestFiltersInner, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *RunScannerRequest) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []RunScannerRequestFiltersInner and assigns it to the Filters field.
func (o *RunScannerRequest) SetFilters(v []RunScannerRequestFiltersInner) {
	o.Filters = v
}

func (o RunScannerRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunScannerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Instrument) {
		toSerialize["instrument"] = o.Instrument
	}
	if !IsNil(o.Locations) {
		toSerialize["locations"] = o.Locations
	}
	if !IsNil(o.ScanCode) {
		toSerialize["scanCode"] = o.ScanCode
	}
	if !IsNil(o.SecType) {
		toSerialize["secType"] = o.SecType
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	return toSerialize, nil
}

type NullableRunScannerRequest struct {
	value *RunScannerRequest
	isSet bool
}

func (v NullableRunScannerRequest) Get() *RunScannerRequest {
	return v.value
}

func (v *NullableRunScannerRequest) Set(val *RunScannerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRunScannerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRunScannerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunScannerRequest(val *RunScannerRequest) *NullableRunScannerRequest {
	return &NullableRunScannerRequest{value: val, isSet: true}
}

func (v NullableRunScannerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunScannerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
