/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the PositionData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PositionData{}

// PositionData struct for PositionData
type PositionData struct {
	// Contract identifier from IBKR's database.
	Conid *float32 `json:"conid,omitempty"`
	// Number of shares or quantity of the position.
	Position *float32 `json:"position,omitempty"`
	// Average cost of the position.
	AvgCost *float32 `json:"avgCost,omitempty"`
}

// NewPositionData instantiates a new PositionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPositionData() *PositionData {
	this := PositionData{}
	return &this
}

// NewPositionDataWithDefaults instantiates a new PositionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPositionDataWithDefaults() *PositionData {
	this := PositionData{}
	return &this
}

// GetConid returns the Conid field value if set, zero value otherwise.
func (o *PositionData) GetConid() float32 {
	if o == nil || IsNil(o.Conid) {
		var ret float32
		return ret
	}
	return *o.Conid
}

// GetConidOk returns a tuple with the Conid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionData) GetConidOk() (*float32, bool) {
	if o == nil || IsNil(o.Conid) {
		return nil, false
	}
	return o.Conid, true
}

// HasConid returns a boolean if a field has been set.
func (o *PositionData) HasConid() bool {
	if o != nil && !IsNil(o.Conid) {
		return true
	}

	return false
}

// SetConid gets a reference to the given float32 and assigns it to the Conid field.
func (o *PositionData) SetConid(v float32) {
	o.Conid = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *PositionData) GetPosition() float32 {
	if o == nil || IsNil(o.Position) {
		var ret float32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionData) GetPositionOk() (*float32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *PositionData) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given float32 and assigns it to the Position field.
func (o *PositionData) SetPosition(v float32) {
	o.Position = &v
}

// GetAvgCost returns the AvgCost field value if set, zero value otherwise.
func (o *PositionData) GetAvgCost() float32 {
	if o == nil || IsNil(o.AvgCost) {
		var ret float32
		return ret
	}
	return *o.AvgCost
}

// GetAvgCostOk returns a tuple with the AvgCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionData) GetAvgCostOk() (*float32, bool) {
	if o == nil || IsNil(o.AvgCost) {
		return nil, false
	}
	return o.AvgCost, true
}

// HasAvgCost returns a boolean if a field has been set.
func (o *PositionData) HasAvgCost() bool {
	if o != nil && !IsNil(o.AvgCost) {
		return true
	}

	return false
}

// SetAvgCost gets a reference to the given float32 and assigns it to the AvgCost field.
func (o *PositionData) SetAvgCost(v float32) {
	o.AvgCost = &v
}

func (o PositionData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PositionData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conid) {
		toSerialize["conid"] = o.Conid
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.AvgCost) {
		toSerialize["avgCost"] = o.AvgCost
	}
	return toSerialize, nil
}

type NullablePositionData struct {
	value *PositionData
	isSet bool
}

func (v NullablePositionData) Get() *PositionData {
	return v.value
}

func (v *NullablePositionData) Set(val *PositionData) {
	v.value = val
	v.isSet = true
}

func (v NullablePositionData) IsSet() bool {
	return v.isSet
}

func (v *NullablePositionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePositionData(val *PositionData) *NullablePositionData {
	return &NullablePositionData{value: val, isSet: true}
}

func (v NullablePositionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePositionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
