/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the TransactionsTransactionsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionsTransactionsInner{}

// TransactionsTransactionsInner struct for TransactionsTransactionsInner
type TransactionsTransactionsInner struct {
	Acctid *string  `json:"acctid,omitempty"`
	Conid  *float32 `json:"conid,omitempty"`
	// currency code
	Cur *string `json:"cur,omitempty"`
	// Conversion rate from asset currency to response currency
	FxRate *float32 `json:"fxRate,omitempty"`
	// Transaction description
	Desc *string `json:"desc,omitempty"`
	// Date of transaction.  Epoch time, GMT
	Date *string `json:"date,omitempty"`
	// Transaction Type Name: Examples: \"Sell\", \"Buy\", \"Corporate Action\", \"Dividend Payment\", \"Transfer\", \"Payment in Lieu\" Dividends and Transfers do not have price and quantity in response
	Type *string `json:"type,omitempty"`
	// Not applicable for all transaction types
	Qty *float32 `json:"qty,omitempty"`
	// In asset currency. Not be applicable for all transaction types.
	Pr *float32 `json:"pr,omitempty"`
	// Raw value, no formatting. Net transaction amount (may include commission, tax). In asset currency
	Amt *float32 `json:"amt,omitempty"`
}

// NewTransactionsTransactionsInner instantiates a new TransactionsTransactionsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionsTransactionsInner() *TransactionsTransactionsInner {
	this := TransactionsTransactionsInner{}
	return &this
}

// NewTransactionsTransactionsInnerWithDefaults instantiates a new TransactionsTransactionsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionsTransactionsInnerWithDefaults() *TransactionsTransactionsInner {
	this := TransactionsTransactionsInner{}
	return &this
}

// GetAcctid returns the Acctid field value if set, zero value otherwise.
func (o *TransactionsTransactionsInner) GetAcctid() string {
	if o == nil || IsNil(o.Acctid) {
		var ret string
		return ret
	}
	return *o.Acctid
}

// GetAcctidOk returns a tuple with the Acctid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsTransactionsInner) GetAcctidOk() (*string, bool) {
	if o == nil || IsNil(o.Acctid) {
		return nil, false
	}
	return o.Acctid, true
}

// HasAcctid returns a boolean if a field has been set.
func (o *TransactionsTransactionsInner) HasAcctid() bool {
	if o != nil && !IsNil(o.Acctid) {
		return true
	}

	return false
}

// SetAcctid gets a reference to the given string and assigns it to the Acctid field.
func (o *TransactionsTransactionsInner) SetAcctid(v string) {
	o.Acctid = &v
}

// GetConid returns the Conid field value if set, zero value otherwise.
func (o *TransactionsTransactionsInner) GetConid() float32 {
	if o == nil || IsNil(o.Conid) {
		var ret float32
		return ret
	}
	return *o.Conid
}

// GetConidOk returns a tuple with the Conid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsTransactionsInner) GetConidOk() (*float32, bool) {
	if o == nil || IsNil(o.Conid) {
		return nil, false
	}
	return o.Conid, true
}

// HasConid returns a boolean if a field has been set.
func (o *TransactionsTransactionsInner) HasConid() bool {
	if o != nil && !IsNil(o.Conid) {
		return true
	}

	return false
}

// SetConid gets a reference to the given float32 and assigns it to the Conid field.
func (o *TransactionsTransactionsInner) SetConid(v float32) {
	o.Conid = &v
}

// GetCur returns the Cur field value if set, zero value otherwise.
func (o *TransactionsTransactionsInner) GetCur() string {
	if o == nil || IsNil(o.Cur) {
		var ret string
		return ret
	}
	return *o.Cur
}

// GetCurOk returns a tuple with the Cur field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsTransactionsInner) GetCurOk() (*string, bool) {
	if o == nil || IsNil(o.Cur) {
		return nil, false
	}
	return o.Cur, true
}

// HasCur returns a boolean if a field has been set.
func (o *TransactionsTransactionsInner) HasCur() bool {
	if o != nil && !IsNil(o.Cur) {
		return true
	}

	return false
}

// SetCur gets a reference to the given string and assigns it to the Cur field.
func (o *TransactionsTransactionsInner) SetCur(v string) {
	o.Cur = &v
}

// GetFxRate returns the FxRate field value if set, zero value otherwise.
func (o *TransactionsTransactionsInner) GetFxRate() float32 {
	if o == nil || IsNil(o.FxRate) {
		var ret float32
		return ret
	}
	return *o.FxRate
}

// GetFxRateOk returns a tuple with the FxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsTransactionsInner) GetFxRateOk() (*float32, bool) {
	if o == nil || IsNil(o.FxRate) {
		return nil, false
	}
	return o.FxRate, true
}

// HasFxRate returns a boolean if a field has been set.
func (o *TransactionsTransactionsInner) HasFxRate() bool {
	if o != nil && !IsNil(o.FxRate) {
		return true
	}

	return false
}

// SetFxRate gets a reference to the given float32 and assigns it to the FxRate field.
func (o *TransactionsTransactionsInner) SetFxRate(v float32) {
	o.FxRate = &v
}

// GetDesc returns the Desc field value if set, zero value otherwise.
func (o *TransactionsTransactionsInner) GetDesc() string {
	if o == nil || IsNil(o.Desc) {
		var ret string
		return ret
	}
	return *o.Desc
}

// GetDescOk returns a tuple with the Desc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsTransactionsInner) GetDescOk() (*string, bool) {
	if o == nil || IsNil(o.Desc) {
		return nil, false
	}
	return o.Desc, true
}

// HasDesc returns a boolean if a field has been set.
func (o *TransactionsTransactionsInner) HasDesc() bool {
	if o != nil && !IsNil(o.Desc) {
		return true
	}

	return false
}

// SetDesc gets a reference to the given string and assigns it to the Desc field.
func (o *TransactionsTransactionsInner) SetDesc(v string) {
	o.Desc = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *TransactionsTransactionsInner) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsTransactionsInner) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *TransactionsTransactionsInner) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *TransactionsTransactionsInner) SetDate(v string) {
	o.Date = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TransactionsTransactionsInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsTransactionsInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TransactionsTransactionsInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TransactionsTransactionsInner) SetType(v string) {
	o.Type = &v
}

// GetQty returns the Qty field value if set, zero value otherwise.
func (o *TransactionsTransactionsInner) GetQty() float32 {
	if o == nil || IsNil(o.Qty) {
		var ret float32
		return ret
	}
	return *o.Qty
}

// GetQtyOk returns a tuple with the Qty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsTransactionsInner) GetQtyOk() (*float32, bool) {
	if o == nil || IsNil(o.Qty) {
		return nil, false
	}
	return o.Qty, true
}

// HasQty returns a boolean if a field has been set.
func (o *TransactionsTransactionsInner) HasQty() bool {
	if o != nil && !IsNil(o.Qty) {
		return true
	}

	return false
}

// SetQty gets a reference to the given float32 and assigns it to the Qty field.
func (o *TransactionsTransactionsInner) SetQty(v float32) {
	o.Qty = &v
}

// GetPr returns the Pr field value if set, zero value otherwise.
func (o *TransactionsTransactionsInner) GetPr() float32 {
	if o == nil || IsNil(o.Pr) {
		var ret float32
		return ret
	}
	return *o.Pr
}

// GetPrOk returns a tuple with the Pr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsTransactionsInner) GetPrOk() (*float32, bool) {
	if o == nil || IsNil(o.Pr) {
		return nil, false
	}
	return o.Pr, true
}

// HasPr returns a boolean if a field has been set.
func (o *TransactionsTransactionsInner) HasPr() bool {
	if o != nil && !IsNil(o.Pr) {
		return true
	}

	return false
}

// SetPr gets a reference to the given float32 and assigns it to the Pr field.
func (o *TransactionsTransactionsInner) SetPr(v float32) {
	o.Pr = &v
}

// GetAmt returns the Amt field value if set, zero value otherwise.
func (o *TransactionsTransactionsInner) GetAmt() float32 {
	if o == nil || IsNil(o.Amt) {
		var ret float32
		return ret
	}
	return *o.Amt
}

// GetAmtOk returns a tuple with the Amt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsTransactionsInner) GetAmtOk() (*float32, bool) {
	if o == nil || IsNil(o.Amt) {
		return nil, false
	}
	return o.Amt, true
}

// HasAmt returns a boolean if a field has been set.
func (o *TransactionsTransactionsInner) HasAmt() bool {
	if o != nil && !IsNil(o.Amt) {
		return true
	}

	return false
}

// SetAmt gets a reference to the given float32 and assigns it to the Amt field.
func (o *TransactionsTransactionsInner) SetAmt(v float32) {
	o.Amt = &v
}

func (o TransactionsTransactionsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionsTransactionsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Acctid) {
		toSerialize["acctid"] = o.Acctid
	}
	if !IsNil(o.Conid) {
		toSerialize["conid"] = o.Conid
	}
	if !IsNil(o.Cur) {
		toSerialize["cur"] = o.Cur
	}
	if !IsNil(o.FxRate) {
		toSerialize["fxRate"] = o.FxRate
	}
	if !IsNil(o.Desc) {
		toSerialize["desc"] = o.Desc
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Qty) {
		toSerialize["qty"] = o.Qty
	}
	if !IsNil(o.Pr) {
		toSerialize["pr"] = o.Pr
	}
	if !IsNil(o.Amt) {
		toSerialize["amt"] = o.Amt
	}
	return toSerialize, nil
}

type NullableTransactionsTransactionsInner struct {
	value *TransactionsTransactionsInner
	isSet bool
}

func (v NullableTransactionsTransactionsInner) Get() *TransactionsTransactionsInner {
	return v.value
}

func (v *NullableTransactionsTransactionsInner) Set(val *TransactionsTransactionsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionsTransactionsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionsTransactionsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionsTransactionsInner(val *TransactionsTransactionsInner) *NullableTransactionsTransactionsInner {
	return &NullableTransactionsTransactionsInner{value: val, isSet: true}
}

func (v NullableTransactionsTransactionsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionsTransactionsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
