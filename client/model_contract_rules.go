/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ContractRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractRules{}

// ContractRules struct for ContractRules
type ContractRules struct {
	OrderTypes        []string `json:"orderTypes,omitempty"`
	OrderTypesOutside []string `json:"orderTypesOutside,omitempty"`
	// default quantity you can use to place an order
	DefaultSize   *float32 `json:"defaultSize,omitempty"`
	SizeIncrement *float32 `json:"sizeIncrement,omitempty"`
	TifTypes      []string `json:"tifTypes,omitempty"`
	// default limit price you can use to prefill your order
	LimitPrice *float32 `json:"limitPrice,omitempty"`
	// default stop price you can use to prefill your order
	Stopprice *float32 `json:"stopprice,omitempty"`
	// if you can preview the order or not with the whatif endpoint
	Preview     *bool   `json:"preview,omitempty"`
	DisplaySize *string `json:"displaySize,omitempty"`
	Increment   *string `json:"increment,omitempty"`
}

// NewContractRules instantiates a new ContractRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractRules() *ContractRules {
	this := ContractRules{}
	return &this
}

// NewContractRulesWithDefaults instantiates a new ContractRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractRulesWithDefaults() *ContractRules {
	this := ContractRules{}
	return &this
}

// GetOrderTypes returns the OrderTypes field value if set, zero value otherwise.
func (o *ContractRules) GetOrderTypes() []string {
	if o == nil || IsNil(o.OrderTypes) {
		var ret []string
		return ret
	}
	return o.OrderTypes
}

// GetOrderTypesOk returns a tuple with the OrderTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractRules) GetOrderTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.OrderTypes) {
		return nil, false
	}
	return o.OrderTypes, true
}

// HasOrderTypes returns a boolean if a field has been set.
func (o *ContractRules) HasOrderTypes() bool {
	if o != nil && !IsNil(o.OrderTypes) {
		return true
	}

	return false
}

// SetOrderTypes gets a reference to the given []string and assigns it to the OrderTypes field.
func (o *ContractRules) SetOrderTypes(v []string) {
	o.OrderTypes = v
}

// GetOrderTypesOutside returns the OrderTypesOutside field value if set, zero value otherwise.
func (o *ContractRules) GetOrderTypesOutside() []string {
	if o == nil || IsNil(o.OrderTypesOutside) {
		var ret []string
		return ret
	}
	return o.OrderTypesOutside
}

// GetOrderTypesOutsideOk returns a tuple with the OrderTypesOutside field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractRules) GetOrderTypesOutsideOk() ([]string, bool) {
	if o == nil || IsNil(o.OrderTypesOutside) {
		return nil, false
	}
	return o.OrderTypesOutside, true
}

// HasOrderTypesOutside returns a boolean if a field has been set.
func (o *ContractRules) HasOrderTypesOutside() bool {
	if o != nil && !IsNil(o.OrderTypesOutside) {
		return true
	}

	return false
}

// SetOrderTypesOutside gets a reference to the given []string and assigns it to the OrderTypesOutside field.
func (o *ContractRules) SetOrderTypesOutside(v []string) {
	o.OrderTypesOutside = v
}

// GetDefaultSize returns the DefaultSize field value if set, zero value otherwise.
func (o *ContractRules) GetDefaultSize() float32 {
	if o == nil || IsNil(o.DefaultSize) {
		var ret float32
		return ret
	}
	return *o.DefaultSize
}

// GetDefaultSizeOk returns a tuple with the DefaultSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractRules) GetDefaultSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultSize) {
		return nil, false
	}
	return o.DefaultSize, true
}

// HasDefaultSize returns a boolean if a field has been set.
func (o *ContractRules) HasDefaultSize() bool {
	if o != nil && !IsNil(o.DefaultSize) {
		return true
	}

	return false
}

// SetDefaultSize gets a reference to the given float32 and assigns it to the DefaultSize field.
func (o *ContractRules) SetDefaultSize(v float32) {
	o.DefaultSize = &v
}

// GetSizeIncrement returns the SizeIncrement field value if set, zero value otherwise.
func (o *ContractRules) GetSizeIncrement() float32 {
	if o == nil || IsNil(o.SizeIncrement) {
		var ret float32
		return ret
	}
	return *o.SizeIncrement
}

// GetSizeIncrementOk returns a tuple with the SizeIncrement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractRules) GetSizeIncrementOk() (*float32, bool) {
	if o == nil || IsNil(o.SizeIncrement) {
		return nil, false
	}
	return o.SizeIncrement, true
}

// HasSizeIncrement returns a boolean if a field has been set.
func (o *ContractRules) HasSizeIncrement() bool {
	if o != nil && !IsNil(o.SizeIncrement) {
		return true
	}

	return false
}

// SetSizeIncrement gets a reference to the given float32 and assigns it to the SizeIncrement field.
func (o *ContractRules) SetSizeIncrement(v float32) {
	o.SizeIncrement = &v
}

// GetTifTypes returns the TifTypes field value if set, zero value otherwise.
func (o *ContractRules) GetTifTypes() []string {
	if o == nil || IsNil(o.TifTypes) {
		var ret []string
		return ret
	}
	return o.TifTypes
}

// GetTifTypesOk returns a tuple with the TifTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractRules) GetTifTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.TifTypes) {
		return nil, false
	}
	return o.TifTypes, true
}

// HasTifTypes returns a boolean if a field has been set.
func (o *ContractRules) HasTifTypes() bool {
	if o != nil && !IsNil(o.TifTypes) {
		return true
	}

	return false
}

// SetTifTypes gets a reference to the given []string and assigns it to the TifTypes field.
func (o *ContractRules) SetTifTypes(v []string) {
	o.TifTypes = v
}

// GetLimitPrice returns the LimitPrice field value if set, zero value otherwise.
func (o *ContractRules) GetLimitPrice() float32 {
	if o == nil || IsNil(o.LimitPrice) {
		var ret float32
		return ret
	}
	return *o.LimitPrice
}

// GetLimitPriceOk returns a tuple with the LimitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractRules) GetLimitPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.LimitPrice) {
		return nil, false
	}
	return o.LimitPrice, true
}

// HasLimitPrice returns a boolean if a field has been set.
func (o *ContractRules) HasLimitPrice() bool {
	if o != nil && !IsNil(o.LimitPrice) {
		return true
	}

	return false
}

// SetLimitPrice gets a reference to the given float32 and assigns it to the LimitPrice field.
func (o *ContractRules) SetLimitPrice(v float32) {
	o.LimitPrice = &v
}

// GetStopprice returns the Stopprice field value if set, zero value otherwise.
func (o *ContractRules) GetStopprice() float32 {
	if o == nil || IsNil(o.Stopprice) {
		var ret float32
		return ret
	}
	return *o.Stopprice
}

// GetStoppriceOk returns a tuple with the Stopprice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractRules) GetStoppriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Stopprice) {
		return nil, false
	}
	return o.Stopprice, true
}

// HasStopprice returns a boolean if a field has been set.
func (o *ContractRules) HasStopprice() bool {
	if o != nil && !IsNil(o.Stopprice) {
		return true
	}

	return false
}

// SetStopprice gets a reference to the given float32 and assigns it to the Stopprice field.
func (o *ContractRules) SetStopprice(v float32) {
	o.Stopprice = &v
}

// GetPreview returns the Preview field value if set, zero value otherwise.
func (o *ContractRules) GetPreview() bool {
	if o == nil || IsNil(o.Preview) {
		var ret bool
		return ret
	}
	return *o.Preview
}

// GetPreviewOk returns a tuple with the Preview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractRules) GetPreviewOk() (*bool, bool) {
	if o == nil || IsNil(o.Preview) {
		return nil, false
	}
	return o.Preview, true
}

// HasPreview returns a boolean if a field has been set.
func (o *ContractRules) HasPreview() bool {
	if o != nil && !IsNil(o.Preview) {
		return true
	}

	return false
}

// SetPreview gets a reference to the given bool and assigns it to the Preview field.
func (o *ContractRules) SetPreview(v bool) {
	o.Preview = &v
}

// GetDisplaySize returns the DisplaySize field value if set, zero value otherwise.
func (o *ContractRules) GetDisplaySize() string {
	if o == nil || IsNil(o.DisplaySize) {
		var ret string
		return ret
	}
	return *o.DisplaySize
}

// GetDisplaySizeOk returns a tuple with the DisplaySize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractRules) GetDisplaySizeOk() (*string, bool) {
	if o == nil || IsNil(o.DisplaySize) {
		return nil, false
	}
	return o.DisplaySize, true
}

// HasDisplaySize returns a boolean if a field has been set.
func (o *ContractRules) HasDisplaySize() bool {
	if o != nil && !IsNil(o.DisplaySize) {
		return true
	}

	return false
}

// SetDisplaySize gets a reference to the given string and assigns it to the DisplaySize field.
func (o *ContractRules) SetDisplaySize(v string) {
	o.DisplaySize = &v
}

// GetIncrement returns the Increment field value if set, zero value otherwise.
func (o *ContractRules) GetIncrement() string {
	if o == nil || IsNil(o.Increment) {
		var ret string
		return ret
	}
	return *o.Increment
}

// GetIncrementOk returns a tuple with the Increment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractRules) GetIncrementOk() (*string, bool) {
	if o == nil || IsNil(o.Increment) {
		return nil, false
	}
	return o.Increment, true
}

// HasIncrement returns a boolean if a field has been set.
func (o *ContractRules) HasIncrement() bool {
	if o != nil && !IsNil(o.Increment) {
		return true
	}

	return false
}

// SetIncrement gets a reference to the given string and assigns it to the Increment field.
func (o *ContractRules) SetIncrement(v string) {
	o.Increment = &v
}

func (o ContractRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrderTypes) {
		toSerialize["orderTypes"] = o.OrderTypes
	}
	if !IsNil(o.OrderTypesOutside) {
		toSerialize["orderTypesOutside"] = o.OrderTypesOutside
	}
	if !IsNil(o.DefaultSize) {
		toSerialize["defaultSize"] = o.DefaultSize
	}
	if !IsNil(o.SizeIncrement) {
		toSerialize["sizeIncrement"] = o.SizeIncrement
	}
	if !IsNil(o.TifTypes) {
		toSerialize["tifTypes"] = o.TifTypes
	}
	if !IsNil(o.LimitPrice) {
		toSerialize["limitPrice"] = o.LimitPrice
	}
	if !IsNil(o.Stopprice) {
		toSerialize["stopprice"] = o.Stopprice
	}
	if !IsNil(o.Preview) {
		toSerialize["preview"] = o.Preview
	}
	if !IsNil(o.DisplaySize) {
		toSerialize["displaySize"] = o.DisplaySize
	}
	if !IsNil(o.Increment) {
		toSerialize["increment"] = o.Increment
	}
	return toSerialize, nil
}

type NullableContractRules struct {
	value *ContractRules
	isSet bool
}

func (v NullableContractRules) Get() *ContractRules {
	return v.value
}

func (v *NullableContractRules) Set(val *ContractRules) {
	v.value = val
	v.isSet = true
}

func (v NullableContractRules) IsSet() bool {
	return v.isSet
}

func (v *NullableContractRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractRules(val *ContractRules) *NullableContractRules {
	return &NullableContractRules{value: val, isSet: true}
}

func (v NullableContractRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
