/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the AllocationInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllocationInner{}

// AllocationInner allocation
type AllocationInner struct {
	AssetClass *AllocationInnerAssetClass `json:"assetClass,omitempty"`
	Sector     *AllocationInnerSector     `json:"sector,omitempty"`
	Group      *AllocationInnerGroup      `json:"group,omitempty"`
}

// NewAllocationInner instantiates a new AllocationInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllocationInner() *AllocationInner {
	this := AllocationInner{}
	return &this
}

// NewAllocationInnerWithDefaults instantiates a new AllocationInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllocationInnerWithDefaults() *AllocationInner {
	this := AllocationInner{}
	return &this
}

// GetAssetClass returns the AssetClass field value if set, zero value otherwise.
func (o *AllocationInner) GetAssetClass() AllocationInnerAssetClass {
	if o == nil || IsNil(o.AssetClass) {
		var ret AllocationInnerAssetClass
		return ret
	}
	return *o.AssetClass
}

// GetAssetClassOk returns a tuple with the AssetClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationInner) GetAssetClassOk() (*AllocationInnerAssetClass, bool) {
	if o == nil || IsNil(o.AssetClass) {
		return nil, false
	}
	return o.AssetClass, true
}

// HasAssetClass returns a boolean if a field has been set.
func (o *AllocationInner) HasAssetClass() bool {
	if o != nil && !IsNil(o.AssetClass) {
		return true
	}

	return false
}

// SetAssetClass gets a reference to the given AllocationInnerAssetClass and assigns it to the AssetClass field.
func (o *AllocationInner) SetAssetClass(v AllocationInnerAssetClass) {
	o.AssetClass = &v
}

// GetSector returns the Sector field value if set, zero value otherwise.
func (o *AllocationInner) GetSector() AllocationInnerSector {
	if o == nil || IsNil(o.Sector) {
		var ret AllocationInnerSector
		return ret
	}
	return *o.Sector
}

// GetSectorOk returns a tuple with the Sector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationInner) GetSectorOk() (*AllocationInnerSector, bool) {
	if o == nil || IsNil(o.Sector) {
		return nil, false
	}
	return o.Sector, true
}

// HasSector returns a boolean if a field has been set.
func (o *AllocationInner) HasSector() bool {
	if o != nil && !IsNil(o.Sector) {
		return true
	}

	return false
}

// SetSector gets a reference to the given AllocationInnerSector and assigns it to the Sector field.
func (o *AllocationInner) SetSector(v AllocationInnerSector) {
	o.Sector = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *AllocationInner) GetGroup() AllocationInnerGroup {
	if o == nil || IsNil(o.Group) {
		var ret AllocationInnerGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationInner) GetGroupOk() (*AllocationInnerGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *AllocationInner) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given AllocationInnerGroup and assigns it to the Group field.
func (o *AllocationInner) SetGroup(v AllocationInnerGroup) {
	o.Group = &v
}

func (o AllocationInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllocationInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssetClass) {
		toSerialize["assetClass"] = o.AssetClass
	}
	if !IsNil(o.Sector) {
		toSerialize["sector"] = o.Sector
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	return toSerialize, nil
}

type NullableAllocationInner struct {
	value *AllocationInner
	isSet bool
}

func (v NullableAllocationInner) Get() *AllocationInner {
	return v.value
}

func (v *NullableAllocationInner) Set(val *AllocationInner) {
	v.value = val
	v.isSet = true
}

func (v NullableAllocationInner) IsSet() bool {
	return v.isSet
}

func (v *NullableAllocationInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllocationInner(val *AllocationInner) *NullableAllocationInner {
	return &NullableAllocationInner{value: val, isSet: true}
}

func (v NullableAllocationInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllocationInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
