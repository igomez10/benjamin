/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the CalendarRequestDate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalendarRequestDate{}

// CalendarRequestDate struct for CalendarRequestDate
type CalendarRequestDate struct {
	// start date of a period. for example 20180808-0400
	Start *string `json:"start,omitempty"`
	// end date of a period. for example 20180808-0400
	End *string `json:"end,omitempty"`
}

// NewCalendarRequestDate instantiates a new CalendarRequestDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalendarRequestDate() *CalendarRequestDate {
	this := CalendarRequestDate{}
	return &this
}

// NewCalendarRequestDateWithDefaults instantiates a new CalendarRequestDate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalendarRequestDateWithDefaults() *CalendarRequestDate {
	this := CalendarRequestDate{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *CalendarRequestDate) GetStart() string {
	if o == nil || IsNil(o.Start) {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarRequestDate) GetStartOk() (*string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *CalendarRequestDate) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *CalendarRequestDate) SetStart(v string) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *CalendarRequestDate) GetEnd() string {
	if o == nil || IsNil(o.End) {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarRequestDate) GetEndOk() (*string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *CalendarRequestDate) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *CalendarRequestDate) SetEnd(v string) {
	o.End = &v
}

func (o CalendarRequestDate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalendarRequestDate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	return toSerialize, nil
}

type NullableCalendarRequestDate struct {
	value *CalendarRequestDate
	isSet bool
}

func (v NullableCalendarRequestDate) Get() *CalendarRequestDate {
	return v.value
}

func (v *NullableCalendarRequestDate) Set(val *CalendarRequestDate) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendarRequestDate) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendarRequestDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendarRequestDate(val *CalendarRequestDate) *NullableCalendarRequestDate {
	return &NullableCalendarRequestDate{value: val, isSet: true}
}

func (v NullableCalendarRequestDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendarRequestDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
