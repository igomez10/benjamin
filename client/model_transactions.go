/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Transactions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transactions{}

// Transactions account transactions
type Transactions struct {
	// will always be getTransactions
	Id *string `json:"id,omitempty"`
	// same as request
	Currency *string `json:"currency,omitempty"`
	// Indicates whether current day and realtime data is included in the result
	IncludesRealTime *bool `json:"includesRealTime,omitempty"`
	// Period start date. Epoch time, GMT
	From *float32 `json:"from,omitempty"`
	// Period end date. Epoch time, GMT
	To *float32 `json:"to,omitempty"`
	// Sorted by date descending
	Transactions []TransactionsTransactionsInner `json:"transactions,omitempty"`
}

// NewTransactions instantiates a new Transactions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactions() *Transactions {
	this := Transactions{}
	return &this
}

// NewTransactionsWithDefaults instantiates a new Transactions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionsWithDefaults() *Transactions {
	this := Transactions{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Transactions) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transactions) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Transactions) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Transactions) SetId(v string) {
	o.Id = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Transactions) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transactions) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Transactions) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Transactions) SetCurrency(v string) {
	o.Currency = &v
}

// GetIncludesRealTime returns the IncludesRealTime field value if set, zero value otherwise.
func (o *Transactions) GetIncludesRealTime() bool {
	if o == nil || IsNil(o.IncludesRealTime) {
		var ret bool
		return ret
	}
	return *o.IncludesRealTime
}

// GetIncludesRealTimeOk returns a tuple with the IncludesRealTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transactions) GetIncludesRealTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludesRealTime) {
		return nil, false
	}
	return o.IncludesRealTime, true
}

// HasIncludesRealTime returns a boolean if a field has been set.
func (o *Transactions) HasIncludesRealTime() bool {
	if o != nil && !IsNil(o.IncludesRealTime) {
		return true
	}

	return false
}

// SetIncludesRealTime gets a reference to the given bool and assigns it to the IncludesRealTime field.
func (o *Transactions) SetIncludesRealTime(v bool) {
	o.IncludesRealTime = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *Transactions) GetFrom() float32 {
	if o == nil || IsNil(o.From) {
		var ret float32
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transactions) GetFromOk() (*float32, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *Transactions) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given float32 and assigns it to the From field.
func (o *Transactions) SetFrom(v float32) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *Transactions) GetTo() float32 {
	if o == nil || IsNil(o.To) {
		var ret float32
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transactions) GetToOk() (*float32, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *Transactions) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given float32 and assigns it to the To field.
func (o *Transactions) SetTo(v float32) {
	o.To = &v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *Transactions) GetTransactions() []TransactionsTransactionsInner {
	if o == nil || IsNil(o.Transactions) {
		var ret []TransactionsTransactionsInner
		return ret
	}
	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transactions) GetTransactionsOk() ([]TransactionsTransactionsInner, bool) {
	if o == nil || IsNil(o.Transactions) {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *Transactions) HasTransactions() bool {
	if o != nil && !IsNil(o.Transactions) {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []TransactionsTransactionsInner and assigns it to the Transactions field.
func (o *Transactions) SetTransactions(v []TransactionsTransactionsInner) {
	o.Transactions = v
}

func (o Transactions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transactions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.IncludesRealTime) {
		toSerialize["includesRealTime"] = o.IncludesRealTime
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Transactions) {
		toSerialize["transactions"] = o.Transactions
	}
	return toSerialize, nil
}

type NullableTransactions struct {
	value *Transactions
	isSet bool
}

func (v NullableTransactions) Get() *Transactions {
	return v.value
}

func (v *NullableTransactions) Set(val *Transactions) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactions) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactions(val *Transactions) *NullableTransactions {
	return &NullableTransactions{value: val, isSet: true}
}

func (v NullableTransactions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
