/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Account type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Account{}

// Account account information
type Account struct {
	// The account identification value
	Id *string `json:"id,omitempty"`
	// The account number
	AccountId *string `json:"accountId,omitempty"`
	// The accountAlias
	AccountVan *string `json:"accountVan,omitempty"`
	// Title of the account
	AccountTitle *string `json:"accountTitle,omitempty"`
	// Whichever value is not null in this priority
	DisplayName *string `json:"displayName,omitempty"`
	// User customizable account alias. Refer to [Configure Account Alias](https://guides.interactivebrokers.com/cp/cp.htm#am/settings/accountalias.htm) for details.
	AccountAlias *string `json:"accountAlias,omitempty"`
	// When the account was opened in unix time.
	AccountStatus *float32 `json:"accountStatus,omitempty"`
	// Base currency of the account.
	Currency *string `json:"currency,omitempty"`
	// Account Type
	Type *string `json:"type,omitempty"`
	// UNI - Deprecated property
	TradingType *string `json:"tradingType,omitempty"`
	// If an account is a sub-account to a Financial Advisor.
	Faclient *bool `json:"faclient,omitempty"`
	// Status of the Account   * O = Open   * P or N = Pending   * A = Abandoned   * R = Rejected   * C = Closed
	ClearingStatus *string `json:"clearingStatus,omitempty"`
	// Is a Covestor Account
	Covestor *bool          `json:"covestor,omitempty"`
	Parent   *AccountParent `json:"parent,omitempty"`
	// Formatted \"accountId - accountAlias\"
	Desc *string `json:"desc,omitempty"`
}

// NewAccount instantiates a new Account object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccount() *Account {
	this := Account{}
	return &this
}

// NewAccountWithDefaults instantiates a new Account object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWithDefaults() *Account {
	this := Account{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Account) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Account) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Account) SetId(v string) {
	o.Id = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *Account) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *Account) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *Account) SetAccountId(v string) {
	o.AccountId = &v
}

// GetAccountVan returns the AccountVan field value if set, zero value otherwise.
func (o *Account) GetAccountVan() string {
	if o == nil || IsNil(o.AccountVan) {
		var ret string
		return ret
	}
	return *o.AccountVan
}

// GetAccountVanOk returns a tuple with the AccountVan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAccountVanOk() (*string, bool) {
	if o == nil || IsNil(o.AccountVan) {
		return nil, false
	}
	return o.AccountVan, true
}

// HasAccountVan returns a boolean if a field has been set.
func (o *Account) HasAccountVan() bool {
	if o != nil && !IsNil(o.AccountVan) {
		return true
	}

	return false
}

// SetAccountVan gets a reference to the given string and assigns it to the AccountVan field.
func (o *Account) SetAccountVan(v string) {
	o.AccountVan = &v
}

// GetAccountTitle returns the AccountTitle field value if set, zero value otherwise.
func (o *Account) GetAccountTitle() string {
	if o == nil || IsNil(o.AccountTitle) {
		var ret string
		return ret
	}
	return *o.AccountTitle
}

// GetAccountTitleOk returns a tuple with the AccountTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAccountTitleOk() (*string, bool) {
	if o == nil || IsNil(o.AccountTitle) {
		return nil, false
	}
	return o.AccountTitle, true
}

// HasAccountTitle returns a boolean if a field has been set.
func (o *Account) HasAccountTitle() bool {
	if o != nil && !IsNil(o.AccountTitle) {
		return true
	}

	return false
}

// SetAccountTitle gets a reference to the given string and assigns it to the AccountTitle field.
func (o *Account) SetAccountTitle(v string) {
	o.AccountTitle = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Account) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Account) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Account) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetAccountAlias returns the AccountAlias field value if set, zero value otherwise.
func (o *Account) GetAccountAlias() string {
	if o == nil || IsNil(o.AccountAlias) {
		var ret string
		return ret
	}
	return *o.AccountAlias
}

// GetAccountAliasOk returns a tuple with the AccountAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAccountAliasOk() (*string, bool) {
	if o == nil || IsNil(o.AccountAlias) {
		return nil, false
	}
	return o.AccountAlias, true
}

// HasAccountAlias returns a boolean if a field has been set.
func (o *Account) HasAccountAlias() bool {
	if o != nil && !IsNil(o.AccountAlias) {
		return true
	}

	return false
}

// SetAccountAlias gets a reference to the given string and assigns it to the AccountAlias field.
func (o *Account) SetAccountAlias(v string) {
	o.AccountAlias = &v
}

// GetAccountStatus returns the AccountStatus field value if set, zero value otherwise.
func (o *Account) GetAccountStatus() float32 {
	if o == nil || IsNil(o.AccountStatus) {
		var ret float32
		return ret
	}
	return *o.AccountStatus
}

// GetAccountStatusOk returns a tuple with the AccountStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAccountStatusOk() (*float32, bool) {
	if o == nil || IsNil(o.AccountStatus) {
		return nil, false
	}
	return o.AccountStatus, true
}

// HasAccountStatus returns a boolean if a field has been set.
func (o *Account) HasAccountStatus() bool {
	if o != nil && !IsNil(o.AccountStatus) {
		return true
	}

	return false
}

// SetAccountStatus gets a reference to the given float32 and assigns it to the AccountStatus field.
func (o *Account) SetAccountStatus(v float32) {
	o.AccountStatus = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Account) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Account) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Account) SetCurrency(v string) {
	o.Currency = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Account) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Account) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Account) SetType(v string) {
	o.Type = &v
}

// GetTradingType returns the TradingType field value if set, zero value otherwise.
func (o *Account) GetTradingType() string {
	if o == nil || IsNil(o.TradingType) {
		var ret string
		return ret
	}
	return *o.TradingType
}

// GetTradingTypeOk returns a tuple with the TradingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetTradingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TradingType) {
		return nil, false
	}
	return o.TradingType, true
}

// HasTradingType returns a boolean if a field has been set.
func (o *Account) HasTradingType() bool {
	if o != nil && !IsNil(o.TradingType) {
		return true
	}

	return false
}

// SetTradingType gets a reference to the given string and assigns it to the TradingType field.
func (o *Account) SetTradingType(v string) {
	o.TradingType = &v
}

// GetFaclient returns the Faclient field value if set, zero value otherwise.
func (o *Account) GetFaclient() bool {
	if o == nil || IsNil(o.Faclient) {
		var ret bool
		return ret
	}
	return *o.Faclient
}

// GetFaclientOk returns a tuple with the Faclient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetFaclientOk() (*bool, bool) {
	if o == nil || IsNil(o.Faclient) {
		return nil, false
	}
	return o.Faclient, true
}

// HasFaclient returns a boolean if a field has been set.
func (o *Account) HasFaclient() bool {
	if o != nil && !IsNil(o.Faclient) {
		return true
	}

	return false
}

// SetFaclient gets a reference to the given bool and assigns it to the Faclient field.
func (o *Account) SetFaclient(v bool) {
	o.Faclient = &v
}

// GetClearingStatus returns the ClearingStatus field value if set, zero value otherwise.
func (o *Account) GetClearingStatus() string {
	if o == nil || IsNil(o.ClearingStatus) {
		var ret string
		return ret
	}
	return *o.ClearingStatus
}

// GetClearingStatusOk returns a tuple with the ClearingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetClearingStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ClearingStatus) {
		return nil, false
	}
	return o.ClearingStatus, true
}

// HasClearingStatus returns a boolean if a field has been set.
func (o *Account) HasClearingStatus() bool {
	if o != nil && !IsNil(o.ClearingStatus) {
		return true
	}

	return false
}

// SetClearingStatus gets a reference to the given string and assigns it to the ClearingStatus field.
func (o *Account) SetClearingStatus(v string) {
	o.ClearingStatus = &v
}

// GetCovestor returns the Covestor field value if set, zero value otherwise.
func (o *Account) GetCovestor() bool {
	if o == nil || IsNil(o.Covestor) {
		var ret bool
		return ret
	}
	return *o.Covestor
}

// GetCovestorOk returns a tuple with the Covestor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCovestorOk() (*bool, bool) {
	if o == nil || IsNil(o.Covestor) {
		return nil, false
	}
	return o.Covestor, true
}

// HasCovestor returns a boolean if a field has been set.
func (o *Account) HasCovestor() bool {
	if o != nil && !IsNil(o.Covestor) {
		return true
	}

	return false
}

// SetCovestor gets a reference to the given bool and assigns it to the Covestor field.
func (o *Account) SetCovestor(v bool) {
	o.Covestor = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *Account) GetParent() AccountParent {
	if o == nil || IsNil(o.Parent) {
		var ret AccountParent
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetParentOk() (*AccountParent, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *Account) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given AccountParent and assigns it to the Parent field.
func (o *Account) SetParent(v AccountParent) {
	o.Parent = &v
}

// GetDesc returns the Desc field value if set, zero value otherwise.
func (o *Account) GetDesc() string {
	if o == nil || IsNil(o.Desc) {
		var ret string
		return ret
	}
	return *o.Desc
}

// GetDescOk returns a tuple with the Desc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetDescOk() (*string, bool) {
	if o == nil || IsNil(o.Desc) {
		return nil, false
	}
	return o.Desc, true
}

// HasDesc returns a boolean if a field has been set.
func (o *Account) HasDesc() bool {
	if o != nil && !IsNil(o.Desc) {
		return true
	}

	return false
}

// SetDesc gets a reference to the given string and assigns it to the Desc field.
func (o *Account) SetDesc(v string) {
	o.Desc = &v
}

func (o Account) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Account) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.AccountVan) {
		toSerialize["accountVan"] = o.AccountVan
	}
	if !IsNil(o.AccountTitle) {
		toSerialize["accountTitle"] = o.AccountTitle
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.AccountAlias) {
		toSerialize["accountAlias"] = o.AccountAlias
	}
	if !IsNil(o.AccountStatus) {
		toSerialize["accountStatus"] = o.AccountStatus
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TradingType) {
		toSerialize["tradingType"] = o.TradingType
	}
	if !IsNil(o.Faclient) {
		toSerialize["faclient"] = o.Faclient
	}
	if !IsNil(o.ClearingStatus) {
		toSerialize["clearingStatus"] = o.ClearingStatus
	}
	if !IsNil(o.Covestor) {
		toSerialize["covestor"] = o.Covestor
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Desc) {
		toSerialize["desc"] = o.Desc
	}
	return toSerialize, nil
}

type NullableAccount struct {
	value *Account
	isSet bool
}

func (v NullableAccount) Get() *Account {
	return v.value
}

func (v *NullableAccount) Set(val *Account) {
	v.value = val
	v.isSet = true
}

func (v NullableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccount(val *Account) *NullableAccount {
	return &NullableAccount{value: val, isSet: true}
}

func (v NullableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
