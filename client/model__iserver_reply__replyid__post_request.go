/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the IserverReplyReplyidPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IserverReplyReplyidPostRequest{}

// IserverReplyReplyidPostRequest struct for IserverReplyReplyidPostRequest
type IserverReplyReplyidPostRequest struct {
	// answer to question, true means yes, false means no
	Confirmed *bool `json:"confirmed,omitempty"`
}

// NewIserverReplyReplyidPostRequest instantiates a new IserverReplyReplyidPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIserverReplyReplyidPostRequest() *IserverReplyReplyidPostRequest {
	this := IserverReplyReplyidPostRequest{}
	return &this
}

// NewIserverReplyReplyidPostRequestWithDefaults instantiates a new IserverReplyReplyidPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIserverReplyReplyidPostRequestWithDefaults() *IserverReplyReplyidPostRequest {
	this := IserverReplyReplyidPostRequest{}
	return &this
}

// GetConfirmed returns the Confirmed field value if set, zero value otherwise.
func (o *IserverReplyReplyidPostRequest) GetConfirmed() bool {
	if o == nil || IsNil(o.Confirmed) {
		var ret bool
		return ret
	}
	return *o.Confirmed
}

// GetConfirmedOk returns a tuple with the Confirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IserverReplyReplyidPostRequest) GetConfirmedOk() (*bool, bool) {
	if o == nil || IsNil(o.Confirmed) {
		return nil, false
	}
	return o.Confirmed, true
}

// HasConfirmed returns a boolean if a field has been set.
func (o *IserverReplyReplyidPostRequest) HasConfirmed() bool {
	if o != nil && !IsNil(o.Confirmed) {
		return true
	}

	return false
}

// SetConfirmed gets a reference to the given bool and assigns it to the Confirmed field.
func (o *IserverReplyReplyidPostRequest) SetConfirmed(v bool) {
	o.Confirmed = &v
}

func (o IserverReplyReplyidPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IserverReplyReplyidPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Confirmed) {
		toSerialize["confirmed"] = o.Confirmed
	}
	return toSerialize, nil
}

type NullableIserverReplyReplyidPostRequest struct {
	value *IserverReplyReplyidPostRequest
	isSet bool
}

func (v NullableIserverReplyReplyidPostRequest) Get() *IserverReplyReplyidPostRequest {
	return v.value
}

func (v *NullableIserverReplyReplyidPostRequest) Set(val *IserverReplyReplyidPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIserverReplyReplyidPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIserverReplyReplyidPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIserverReplyReplyidPostRequest(val *IserverReplyReplyidPostRequest) *NullableIserverReplyReplyidPostRequest {
	return &NullableIserverReplyReplyidPostRequest{value: val, isSet: true}
}

func (v NullableIserverReplyReplyidPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIserverReplyReplyidPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
