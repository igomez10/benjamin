/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the OrderDataWarnings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderDataWarnings{}

// OrderDataWarnings struct for OrderDataWarnings
type OrderDataWarnings struct {
	PRICECAP *string `json:"PRICECAP,omitempty"`
	TIME     *string `json:"TIME,omitempty"`
}

// NewOrderDataWarnings instantiates a new OrderDataWarnings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderDataWarnings() *OrderDataWarnings {
	this := OrderDataWarnings{}
	return &this
}

// NewOrderDataWarningsWithDefaults instantiates a new OrderDataWarnings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderDataWarningsWithDefaults() *OrderDataWarnings {
	this := OrderDataWarnings{}
	return &this
}

// GetPRICECAP returns the PRICECAP field value if set, zero value otherwise.
func (o *OrderDataWarnings) GetPRICECAP() string {
	if o == nil || IsNil(o.PRICECAP) {
		var ret string
		return ret
	}
	return *o.PRICECAP
}

// GetPRICECAPOk returns a tuple with the PRICECAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDataWarnings) GetPRICECAPOk() (*string, bool) {
	if o == nil || IsNil(o.PRICECAP) {
		return nil, false
	}
	return o.PRICECAP, true
}

// HasPRICECAP returns a boolean if a field has been set.
func (o *OrderDataWarnings) HasPRICECAP() bool {
	if o != nil && !IsNil(o.PRICECAP) {
		return true
	}

	return false
}

// SetPRICECAP gets a reference to the given string and assigns it to the PRICECAP field.
func (o *OrderDataWarnings) SetPRICECAP(v string) {
	o.PRICECAP = &v
}

// GetTIME returns the TIME field value if set, zero value otherwise.
func (o *OrderDataWarnings) GetTIME() string {
	if o == nil || IsNil(o.TIME) {
		var ret string
		return ret
	}
	return *o.TIME
}

// GetTIMEOk returns a tuple with the TIME field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderDataWarnings) GetTIMEOk() (*string, bool) {
	if o == nil || IsNil(o.TIME) {
		return nil, false
	}
	return o.TIME, true
}

// HasTIME returns a boolean if a field has been set.
func (o *OrderDataWarnings) HasTIME() bool {
	if o != nil && !IsNil(o.TIME) {
		return true
	}

	return false
}

// SetTIME gets a reference to the given string and assigns it to the TIME field.
func (o *OrderDataWarnings) SetTIME(v string) {
	o.TIME = &v
}

func (o OrderDataWarnings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderDataWarnings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PRICECAP) {
		toSerialize["PRICECAP"] = o.PRICECAP
	}
	if !IsNil(o.TIME) {
		toSerialize["TIME"] = o.TIME
	}
	return toSerialize, nil
}

type NullableOrderDataWarnings struct {
	value *OrderDataWarnings
	isSet bool
}

func (v NullableOrderDataWarnings) Get() *OrderDataWarnings {
	return v.value
}

func (v *NullableOrderDataWarnings) Set(val *OrderDataWarnings) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderDataWarnings) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderDataWarnings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderDataWarnings(val *OrderDataWarnings) *NullableOrderDataWarnings {
	return &NullableOrderDataWarnings{value: val, isSet: true}
}

func (v NullableOrderDataWarnings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderDataWarnings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
