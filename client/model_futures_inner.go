/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the FuturesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FuturesInner{}

// FuturesInner future contract information
type FuturesInner struct {
	Symbol *string `json:"symbol,omitempty"`
	// conid of the future contract
	Conid           *int32  `json:"conid,omitempty"`
	UnderlyingConid *int32  `json:"underlyingConid,omitempty"`
	ExpirationDate  *string `json:"expirationDate,omitempty"`
	// last trading day
	Ltd *string `json:"ltd,omitempty"`
}

// NewFuturesInner instantiates a new FuturesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFuturesInner() *FuturesInner {
	this := FuturesInner{}
	return &this
}

// NewFuturesInnerWithDefaults instantiates a new FuturesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFuturesInnerWithDefaults() *FuturesInner {
	this := FuturesInner{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *FuturesInner) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FuturesInner) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *FuturesInner) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *FuturesInner) SetSymbol(v string) {
	o.Symbol = &v
}

// GetConid returns the Conid field value if set, zero value otherwise.
func (o *FuturesInner) GetConid() int32 {
	if o == nil || IsNil(o.Conid) {
		var ret int32
		return ret
	}
	return *o.Conid
}

// GetConidOk returns a tuple with the Conid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FuturesInner) GetConidOk() (*int32, bool) {
	if o == nil || IsNil(o.Conid) {
		return nil, false
	}
	return o.Conid, true
}

// HasConid returns a boolean if a field has been set.
func (o *FuturesInner) HasConid() bool {
	if o != nil && !IsNil(o.Conid) {
		return true
	}

	return false
}

// SetConid gets a reference to the given int32 and assigns it to the Conid field.
func (o *FuturesInner) SetConid(v int32) {
	o.Conid = &v
}

// GetUnderlyingConid returns the UnderlyingConid field value if set, zero value otherwise.
func (o *FuturesInner) GetUnderlyingConid() int32 {
	if o == nil || IsNil(o.UnderlyingConid) {
		var ret int32
		return ret
	}
	return *o.UnderlyingConid
}

// GetUnderlyingConidOk returns a tuple with the UnderlyingConid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FuturesInner) GetUnderlyingConidOk() (*int32, bool) {
	if o == nil || IsNil(o.UnderlyingConid) {
		return nil, false
	}
	return o.UnderlyingConid, true
}

// HasUnderlyingConid returns a boolean if a field has been set.
func (o *FuturesInner) HasUnderlyingConid() bool {
	if o != nil && !IsNil(o.UnderlyingConid) {
		return true
	}

	return false
}

// SetUnderlyingConid gets a reference to the given int32 and assigns it to the UnderlyingConid field.
func (o *FuturesInner) SetUnderlyingConid(v int32) {
	o.UnderlyingConid = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *FuturesInner) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FuturesInner) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *FuturesInner) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *FuturesInner) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetLtd returns the Ltd field value if set, zero value otherwise.
func (o *FuturesInner) GetLtd() string {
	if o == nil || IsNil(o.Ltd) {
		var ret string
		return ret
	}
	return *o.Ltd
}

// GetLtdOk returns a tuple with the Ltd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FuturesInner) GetLtdOk() (*string, bool) {
	if o == nil || IsNil(o.Ltd) {
		return nil, false
	}
	return o.Ltd, true
}

// HasLtd returns a boolean if a field has been set.
func (o *FuturesInner) HasLtd() bool {
	if o != nil && !IsNil(o.Ltd) {
		return true
	}

	return false
}

// SetLtd gets a reference to the given string and assigns it to the Ltd field.
func (o *FuturesInner) SetLtd(v string) {
	o.Ltd = &v
}

func (o FuturesInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FuturesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Conid) {
		toSerialize["conid"] = o.Conid
	}
	if !IsNil(o.UnderlyingConid) {
		toSerialize["underlyingConid"] = o.UnderlyingConid
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.Ltd) {
		toSerialize["ltd"] = o.Ltd
	}
	return toSerialize, nil
}

type NullableFuturesInner struct {
	value *FuturesInner
	isSet bool
}

func (v NullableFuturesInner) Get() *FuturesInner {
	return v.value
}

func (v *NullableFuturesInner) Set(val *FuturesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableFuturesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableFuturesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFuturesInner(val *FuturesInner) *NullableFuturesInner {
	return &NullableFuturesInner{value: val, isSet: true}
}

func (v NullableFuturesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFuturesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
