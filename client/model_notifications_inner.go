/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the NotificationsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationsInner{}

// NotificationsInner notification
type NotificationsInner struct {
	// notification date
	D *string `json:"D,omitempty"`
	// unique way to reference this notification
	ID *string `json:"ID,omitempty"`
	// FYI code, we can use it to find whether the disclaimer is accepted or not in settings
	FC *string `json:"FC,omitempty"`
	// content of notification
	MD *string `json:"MD,omitempty"`
	// title of notification
	MS *string `json:"MS,omitempty"`
	// 0-unread, 1-read
	R *string `json:"R,omitempty"`
}

// NewNotificationsInner instantiates a new NotificationsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationsInner() *NotificationsInner {
	this := NotificationsInner{}
	return &this
}

// NewNotificationsInnerWithDefaults instantiates a new NotificationsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationsInnerWithDefaults() *NotificationsInner {
	this := NotificationsInner{}
	return &this
}

// GetD returns the D field value if set, zero value otherwise.
func (o *NotificationsInner) GetD() string {
	if o == nil || IsNil(o.D) {
		var ret string
		return ret
	}
	return *o.D
}

// GetDOk returns a tuple with the D field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsInner) GetDOk() (*string, bool) {
	if o == nil || IsNil(o.D) {
		return nil, false
	}
	return o.D, true
}

// HasD returns a boolean if a field has been set.
func (o *NotificationsInner) HasD() bool {
	if o != nil && !IsNil(o.D) {
		return true
	}

	return false
}

// SetD gets a reference to the given string and assigns it to the D field.
func (o *NotificationsInner) SetD(v string) {
	o.D = &v
}

// GetID returns the ID field value if set, zero value otherwise.
func (o *NotificationsInner) GetID() string {
	if o == nil || IsNil(o.ID) {
		var ret string
		return ret
	}
	return *o.ID
}

// GetIDOk returns a tuple with the ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsInner) GetIDOk() (*string, bool) {
	if o == nil || IsNil(o.ID) {
		return nil, false
	}
	return o.ID, true
}

// HasID returns a boolean if a field has been set.
func (o *NotificationsInner) HasID() bool {
	if o != nil && !IsNil(o.ID) {
		return true
	}

	return false
}

// SetID gets a reference to the given string and assigns it to the ID field.
func (o *NotificationsInner) SetID(v string) {
	o.ID = &v
}

// GetFC returns the FC field value if set, zero value otherwise.
func (o *NotificationsInner) GetFC() string {
	if o == nil || IsNil(o.FC) {
		var ret string
		return ret
	}
	return *o.FC
}

// GetFCOk returns a tuple with the FC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsInner) GetFCOk() (*string, bool) {
	if o == nil || IsNil(o.FC) {
		return nil, false
	}
	return o.FC, true
}

// HasFC returns a boolean if a field has been set.
func (o *NotificationsInner) HasFC() bool {
	if o != nil && !IsNil(o.FC) {
		return true
	}

	return false
}

// SetFC gets a reference to the given string and assigns it to the FC field.
func (o *NotificationsInner) SetFC(v string) {
	o.FC = &v
}

// GetMD returns the MD field value if set, zero value otherwise.
func (o *NotificationsInner) GetMD() string {
	if o == nil || IsNil(o.MD) {
		var ret string
		return ret
	}
	return *o.MD
}

// GetMDOk returns a tuple with the MD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsInner) GetMDOk() (*string, bool) {
	if o == nil || IsNil(o.MD) {
		return nil, false
	}
	return o.MD, true
}

// HasMD returns a boolean if a field has been set.
func (o *NotificationsInner) HasMD() bool {
	if o != nil && !IsNil(o.MD) {
		return true
	}

	return false
}

// SetMD gets a reference to the given string and assigns it to the MD field.
func (o *NotificationsInner) SetMD(v string) {
	o.MD = &v
}

// GetMS returns the MS field value if set, zero value otherwise.
func (o *NotificationsInner) GetMS() string {
	if o == nil || IsNil(o.MS) {
		var ret string
		return ret
	}
	return *o.MS
}

// GetMSOk returns a tuple with the MS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsInner) GetMSOk() (*string, bool) {
	if o == nil || IsNil(o.MS) {
		return nil, false
	}
	return o.MS, true
}

// HasMS returns a boolean if a field has been set.
func (o *NotificationsInner) HasMS() bool {
	if o != nil && !IsNil(o.MS) {
		return true
	}

	return false
}

// SetMS gets a reference to the given string and assigns it to the MS field.
func (o *NotificationsInner) SetMS(v string) {
	o.MS = &v
}

// GetR returns the R field value if set, zero value otherwise.
func (o *NotificationsInner) GetR() string {
	if o == nil || IsNil(o.R) {
		var ret string
		return ret
	}
	return *o.R
}

// GetROk returns a tuple with the R field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsInner) GetROk() (*string, bool) {
	if o == nil || IsNil(o.R) {
		return nil, false
	}
	return o.R, true
}

// HasR returns a boolean if a field has been set.
func (o *NotificationsInner) HasR() bool {
	if o != nil && !IsNil(o.R) {
		return true
	}

	return false
}

// SetR gets a reference to the given string and assigns it to the R field.
func (o *NotificationsInner) SetR(v string) {
	o.R = &v
}

func (o NotificationsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.D) {
		toSerialize["D"] = o.D
	}
	if !IsNil(o.ID) {
		toSerialize["ID"] = o.ID
	}
	if !IsNil(o.FC) {
		toSerialize["FC"] = o.FC
	}
	if !IsNil(o.MD) {
		toSerialize["MD"] = o.MD
	}
	if !IsNil(o.MS) {
		toSerialize["MS"] = o.MS
	}
	if !IsNil(o.R) {
		toSerialize["R"] = o.R
	}
	return toSerialize, nil
}

type NullableNotificationsInner struct {
	value *NotificationsInner
	isSet bool
}

func (v NullableNotificationsInner) Get() *NotificationsInner {
	return v.value
}

func (v *NullableNotificationsInner) Set(val *NotificationsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationsInner(val *NotificationsInner) *NullableNotificationsInner {
	return &NullableNotificationsInner{value: val, isSet: true}
}

func (v NullableNotificationsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
