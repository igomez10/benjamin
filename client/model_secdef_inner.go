/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the SecdefInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecdefInner{}

// SecdefInner security definition information.
type SecdefInner struct {
	// IBKR contract identifier.
	Conid *int32 `json:"conid,omitempty"`
	// Currency contract trades in.
	Currency *string `json:"currency,omitempty"`
	// Defines if a derivative contract has a different currency.
	CrossCurrency *bool  `json:"crossCurrency,omitempty"`
	Time          *int32 `json:"time,omitempty"`
	// HTML encoded company description in Chinese.
	ChineseName *string `json:"chineseName,omitempty"`
	// List of exchanges and venues contract trades.
	AllExchanges *string `json:"allExchanges,omitempty"`
	// Main trading venue.
	ListingExchange *string `json:"listingExchange,omitempty"`
	// Company Name.
	Name *string `json:"name,omitempty"`
	// Group of financial instruments which have similar financial characteristics and behave similar in the marketplace.
	AssetClass *string `json:"assetClass,omitempty"`
	// Specific data contract expires.
	Expiry *string `json:"expiry,omitempty"`
	// Final day derivative contract can be traded before delivery of the underlying asset or cash settlement.
	LastTradingDay *string `json:"lastTradingDay,omitempty"`
	// Potential characteristic of each product.
	Group *string `json:"group,omitempty"`
	// Defines the right to buy or sell of the underlying security.
	PutOrCall *string `json:"putOrCall,omitempty"`
	// The category of the economy.
	Sector *string `json:"sector,omitempty"`
	// Stock Group contract belongs too.
	SectorGroup *string `json:"sectorGroup,omitempty"`
	// Set price at which a derivative contract can be bought or sold.
	Strike *float32 `json:"strike,omitempty"`
	// Contract symbol.
	Ticker *string `json:"ticker,omitempty"`
	// Underlying contract identifier.
	UndConid *int32 `json:"undConid,omitempty"`
	// Multiplier for total premium paid or received for derivative contract.
	Multiplier *int32 `json:"multiplier,omitempty"`
	// Stock type.
	Type *string `json:"type,omitempty"`
	// Company name for underlying contract.
	UndComp *string `json:"undComp,omitempty"`
	// IBKR Symbol for underlying contract.
	UndSym *string `json:"undSym,omitempty"`
	// If contract has an option.
	HasOptions *bool `json:"hasOptions,omitempty"`
	// Formatted company name with underlying symbol, expiration, strike, right.
	FullName *string `json:"fullName,omitempty"`
	// If contract is a US contract. Currently supported for stocks, options and warrants.
	IsUS           *bool                      `json:"isUS,omitempty"`
	IncrementRules *SecdefInnerIncrementRules `json:"incrementRules,omitempty"`
}

// NewSecdefInner instantiates a new SecdefInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecdefInner() *SecdefInner {
	this := SecdefInner{}
	return &this
}

// NewSecdefInnerWithDefaults instantiates a new SecdefInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecdefInnerWithDefaults() *SecdefInner {
	this := SecdefInner{}
	return &this
}

// GetConid returns the Conid field value if set, zero value otherwise.
func (o *SecdefInner) GetConid() int32 {
	if o == nil || IsNil(o.Conid) {
		var ret int32
		return ret
	}
	return *o.Conid
}

// GetConidOk returns a tuple with the Conid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetConidOk() (*int32, bool) {
	if o == nil || IsNil(o.Conid) {
		return nil, false
	}
	return o.Conid, true
}

// HasConid returns a boolean if a field has been set.
func (o *SecdefInner) HasConid() bool {
	if o != nil && !IsNil(o.Conid) {
		return true
	}

	return false
}

// SetConid gets a reference to the given int32 and assigns it to the Conid field.
func (o *SecdefInner) SetConid(v int32) {
	o.Conid = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *SecdefInner) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *SecdefInner) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *SecdefInner) SetCurrency(v string) {
	o.Currency = &v
}

// GetCrossCurrency returns the CrossCurrency field value if set, zero value otherwise.
func (o *SecdefInner) GetCrossCurrency() bool {
	if o == nil || IsNil(o.CrossCurrency) {
		var ret bool
		return ret
	}
	return *o.CrossCurrency
}

// GetCrossCurrencyOk returns a tuple with the CrossCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetCrossCurrencyOk() (*bool, bool) {
	if o == nil || IsNil(o.CrossCurrency) {
		return nil, false
	}
	return o.CrossCurrency, true
}

// HasCrossCurrency returns a boolean if a field has been set.
func (o *SecdefInner) HasCrossCurrency() bool {
	if o != nil && !IsNil(o.CrossCurrency) {
		return true
	}

	return false
}

// SetCrossCurrency gets a reference to the given bool and assigns it to the CrossCurrency field.
func (o *SecdefInner) SetCrossCurrency(v bool) {
	o.CrossCurrency = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *SecdefInner) GetTime() int32 {
	if o == nil || IsNil(o.Time) {
		var ret int32
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *SecdefInner) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given int32 and assigns it to the Time field.
func (o *SecdefInner) SetTime(v int32) {
	o.Time = &v
}

// GetChineseName returns the ChineseName field value if set, zero value otherwise.
func (o *SecdefInner) GetChineseName() string {
	if o == nil || IsNil(o.ChineseName) {
		var ret string
		return ret
	}
	return *o.ChineseName
}

// GetChineseNameOk returns a tuple with the ChineseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetChineseNameOk() (*string, bool) {
	if o == nil || IsNil(o.ChineseName) {
		return nil, false
	}
	return o.ChineseName, true
}

// HasChineseName returns a boolean if a field has been set.
func (o *SecdefInner) HasChineseName() bool {
	if o != nil && !IsNil(o.ChineseName) {
		return true
	}

	return false
}

// SetChineseName gets a reference to the given string and assigns it to the ChineseName field.
func (o *SecdefInner) SetChineseName(v string) {
	o.ChineseName = &v
}

// GetAllExchanges returns the AllExchanges field value if set, zero value otherwise.
func (o *SecdefInner) GetAllExchanges() string {
	if o == nil || IsNil(o.AllExchanges) {
		var ret string
		return ret
	}
	return *o.AllExchanges
}

// GetAllExchangesOk returns a tuple with the AllExchanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetAllExchangesOk() (*string, bool) {
	if o == nil || IsNil(o.AllExchanges) {
		return nil, false
	}
	return o.AllExchanges, true
}

// HasAllExchanges returns a boolean if a field has been set.
func (o *SecdefInner) HasAllExchanges() bool {
	if o != nil && !IsNil(o.AllExchanges) {
		return true
	}

	return false
}

// SetAllExchanges gets a reference to the given string and assigns it to the AllExchanges field.
func (o *SecdefInner) SetAllExchanges(v string) {
	o.AllExchanges = &v
}

// GetListingExchange returns the ListingExchange field value if set, zero value otherwise.
func (o *SecdefInner) GetListingExchange() string {
	if o == nil || IsNil(o.ListingExchange) {
		var ret string
		return ret
	}
	return *o.ListingExchange
}

// GetListingExchangeOk returns a tuple with the ListingExchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetListingExchangeOk() (*string, bool) {
	if o == nil || IsNil(o.ListingExchange) {
		return nil, false
	}
	return o.ListingExchange, true
}

// HasListingExchange returns a boolean if a field has been set.
func (o *SecdefInner) HasListingExchange() bool {
	if o != nil && !IsNil(o.ListingExchange) {
		return true
	}

	return false
}

// SetListingExchange gets a reference to the given string and assigns it to the ListingExchange field.
func (o *SecdefInner) SetListingExchange(v string) {
	o.ListingExchange = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SecdefInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SecdefInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SecdefInner) SetName(v string) {
	o.Name = &v
}

// GetAssetClass returns the AssetClass field value if set, zero value otherwise.
func (o *SecdefInner) GetAssetClass() string {
	if o == nil || IsNil(o.AssetClass) {
		var ret string
		return ret
	}
	return *o.AssetClass
}

// GetAssetClassOk returns a tuple with the AssetClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetAssetClassOk() (*string, bool) {
	if o == nil || IsNil(o.AssetClass) {
		return nil, false
	}
	return o.AssetClass, true
}

// HasAssetClass returns a boolean if a field has been set.
func (o *SecdefInner) HasAssetClass() bool {
	if o != nil && !IsNil(o.AssetClass) {
		return true
	}

	return false
}

// SetAssetClass gets a reference to the given string and assigns it to the AssetClass field.
func (o *SecdefInner) SetAssetClass(v string) {
	o.AssetClass = &v
}

// GetExpiry returns the Expiry field value if set, zero value otherwise.
func (o *SecdefInner) GetExpiry() string {
	if o == nil || IsNil(o.Expiry) {
		var ret string
		return ret
	}
	return *o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetExpiryOk() (*string, bool) {
	if o == nil || IsNil(o.Expiry) {
		return nil, false
	}
	return o.Expiry, true
}

// HasExpiry returns a boolean if a field has been set.
func (o *SecdefInner) HasExpiry() bool {
	if o != nil && !IsNil(o.Expiry) {
		return true
	}

	return false
}

// SetExpiry gets a reference to the given string and assigns it to the Expiry field.
func (o *SecdefInner) SetExpiry(v string) {
	o.Expiry = &v
}

// GetLastTradingDay returns the LastTradingDay field value if set, zero value otherwise.
func (o *SecdefInner) GetLastTradingDay() string {
	if o == nil || IsNil(o.LastTradingDay) {
		var ret string
		return ret
	}
	return *o.LastTradingDay
}

// GetLastTradingDayOk returns a tuple with the LastTradingDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetLastTradingDayOk() (*string, bool) {
	if o == nil || IsNil(o.LastTradingDay) {
		return nil, false
	}
	return o.LastTradingDay, true
}

// HasLastTradingDay returns a boolean if a field has been set.
func (o *SecdefInner) HasLastTradingDay() bool {
	if o != nil && !IsNil(o.LastTradingDay) {
		return true
	}

	return false
}

// SetLastTradingDay gets a reference to the given string and assigns it to the LastTradingDay field.
func (o *SecdefInner) SetLastTradingDay(v string) {
	o.LastTradingDay = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *SecdefInner) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *SecdefInner) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *SecdefInner) SetGroup(v string) {
	o.Group = &v
}

// GetPutOrCall returns the PutOrCall field value if set, zero value otherwise.
func (o *SecdefInner) GetPutOrCall() string {
	if o == nil || IsNil(o.PutOrCall) {
		var ret string
		return ret
	}
	return *o.PutOrCall
}

// GetPutOrCallOk returns a tuple with the PutOrCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetPutOrCallOk() (*string, bool) {
	if o == nil || IsNil(o.PutOrCall) {
		return nil, false
	}
	return o.PutOrCall, true
}

// HasPutOrCall returns a boolean if a field has been set.
func (o *SecdefInner) HasPutOrCall() bool {
	if o != nil && !IsNil(o.PutOrCall) {
		return true
	}

	return false
}

// SetPutOrCall gets a reference to the given string and assigns it to the PutOrCall field.
func (o *SecdefInner) SetPutOrCall(v string) {
	o.PutOrCall = &v
}

// GetSector returns the Sector field value if set, zero value otherwise.
func (o *SecdefInner) GetSector() string {
	if o == nil || IsNil(o.Sector) {
		var ret string
		return ret
	}
	return *o.Sector
}

// GetSectorOk returns a tuple with the Sector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetSectorOk() (*string, bool) {
	if o == nil || IsNil(o.Sector) {
		return nil, false
	}
	return o.Sector, true
}

// HasSector returns a boolean if a field has been set.
func (o *SecdefInner) HasSector() bool {
	if o != nil && !IsNil(o.Sector) {
		return true
	}

	return false
}

// SetSector gets a reference to the given string and assigns it to the Sector field.
func (o *SecdefInner) SetSector(v string) {
	o.Sector = &v
}

// GetSectorGroup returns the SectorGroup field value if set, zero value otherwise.
func (o *SecdefInner) GetSectorGroup() string {
	if o == nil || IsNil(o.SectorGroup) {
		var ret string
		return ret
	}
	return *o.SectorGroup
}

// GetSectorGroupOk returns a tuple with the SectorGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetSectorGroupOk() (*string, bool) {
	if o == nil || IsNil(o.SectorGroup) {
		return nil, false
	}
	return o.SectorGroup, true
}

// HasSectorGroup returns a boolean if a field has been set.
func (o *SecdefInner) HasSectorGroup() bool {
	if o != nil && !IsNil(o.SectorGroup) {
		return true
	}

	return false
}

// SetSectorGroup gets a reference to the given string and assigns it to the SectorGroup field.
func (o *SecdefInner) SetSectorGroup(v string) {
	o.SectorGroup = &v
}

// GetStrike returns the Strike field value if set, zero value otherwise.
func (o *SecdefInner) GetStrike() float32 {
	if o == nil || IsNil(o.Strike) {
		var ret float32
		return ret
	}
	return *o.Strike
}

// GetStrikeOk returns a tuple with the Strike field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetStrikeOk() (*float32, bool) {
	if o == nil || IsNil(o.Strike) {
		return nil, false
	}
	return o.Strike, true
}

// HasStrike returns a boolean if a field has been set.
func (o *SecdefInner) HasStrike() bool {
	if o != nil && !IsNil(o.Strike) {
		return true
	}

	return false
}

// SetStrike gets a reference to the given float32 and assigns it to the Strike field.
func (o *SecdefInner) SetStrike(v float32) {
	o.Strike = &v
}

// GetTicker returns the Ticker field value if set, zero value otherwise.
func (o *SecdefInner) GetTicker() string {
	if o == nil || IsNil(o.Ticker) {
		var ret string
		return ret
	}
	return *o.Ticker
}

// GetTickerOk returns a tuple with the Ticker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetTickerOk() (*string, bool) {
	if o == nil || IsNil(o.Ticker) {
		return nil, false
	}
	return o.Ticker, true
}

// HasTicker returns a boolean if a field has been set.
func (o *SecdefInner) HasTicker() bool {
	if o != nil && !IsNil(o.Ticker) {
		return true
	}

	return false
}

// SetTicker gets a reference to the given string and assigns it to the Ticker field.
func (o *SecdefInner) SetTicker(v string) {
	o.Ticker = &v
}

// GetUndConid returns the UndConid field value if set, zero value otherwise.
func (o *SecdefInner) GetUndConid() int32 {
	if o == nil || IsNil(o.UndConid) {
		var ret int32
		return ret
	}
	return *o.UndConid
}

// GetUndConidOk returns a tuple with the UndConid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetUndConidOk() (*int32, bool) {
	if o == nil || IsNil(o.UndConid) {
		return nil, false
	}
	return o.UndConid, true
}

// HasUndConid returns a boolean if a field has been set.
func (o *SecdefInner) HasUndConid() bool {
	if o != nil && !IsNil(o.UndConid) {
		return true
	}

	return false
}

// SetUndConid gets a reference to the given int32 and assigns it to the UndConid field.
func (o *SecdefInner) SetUndConid(v int32) {
	o.UndConid = &v
}

// GetMultiplier returns the Multiplier field value if set, zero value otherwise.
func (o *SecdefInner) GetMultiplier() int32 {
	if o == nil || IsNil(o.Multiplier) {
		var ret int32
		return ret
	}
	return *o.Multiplier
}

// GetMultiplierOk returns a tuple with the Multiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetMultiplierOk() (*int32, bool) {
	if o == nil || IsNil(o.Multiplier) {
		return nil, false
	}
	return o.Multiplier, true
}

// HasMultiplier returns a boolean if a field has been set.
func (o *SecdefInner) HasMultiplier() bool {
	if o != nil && !IsNil(o.Multiplier) {
		return true
	}

	return false
}

// SetMultiplier gets a reference to the given int32 and assigns it to the Multiplier field.
func (o *SecdefInner) SetMultiplier(v int32) {
	o.Multiplier = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SecdefInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SecdefInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SecdefInner) SetType(v string) {
	o.Type = &v
}

// GetUndComp returns the UndComp field value if set, zero value otherwise.
func (o *SecdefInner) GetUndComp() string {
	if o == nil || IsNil(o.UndComp) {
		var ret string
		return ret
	}
	return *o.UndComp
}

// GetUndCompOk returns a tuple with the UndComp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetUndCompOk() (*string, bool) {
	if o == nil || IsNil(o.UndComp) {
		return nil, false
	}
	return o.UndComp, true
}

// HasUndComp returns a boolean if a field has been set.
func (o *SecdefInner) HasUndComp() bool {
	if o != nil && !IsNil(o.UndComp) {
		return true
	}

	return false
}

// SetUndComp gets a reference to the given string and assigns it to the UndComp field.
func (o *SecdefInner) SetUndComp(v string) {
	o.UndComp = &v
}

// GetUndSym returns the UndSym field value if set, zero value otherwise.
func (o *SecdefInner) GetUndSym() string {
	if o == nil || IsNil(o.UndSym) {
		var ret string
		return ret
	}
	return *o.UndSym
}

// GetUndSymOk returns a tuple with the UndSym field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetUndSymOk() (*string, bool) {
	if o == nil || IsNil(o.UndSym) {
		return nil, false
	}
	return o.UndSym, true
}

// HasUndSym returns a boolean if a field has been set.
func (o *SecdefInner) HasUndSym() bool {
	if o != nil && !IsNil(o.UndSym) {
		return true
	}

	return false
}

// SetUndSym gets a reference to the given string and assigns it to the UndSym field.
func (o *SecdefInner) SetUndSym(v string) {
	o.UndSym = &v
}

// GetHasOptions returns the HasOptions field value if set, zero value otherwise.
func (o *SecdefInner) GetHasOptions() bool {
	if o == nil || IsNil(o.HasOptions) {
		var ret bool
		return ret
	}
	return *o.HasOptions
}

// GetHasOptionsOk returns a tuple with the HasOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetHasOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasOptions) {
		return nil, false
	}
	return o.HasOptions, true
}

// HasHasOptions returns a boolean if a field has been set.
func (o *SecdefInner) HasHasOptions() bool {
	if o != nil && !IsNil(o.HasOptions) {
		return true
	}

	return false
}

// SetHasOptions gets a reference to the given bool and assigns it to the HasOptions field.
func (o *SecdefInner) SetHasOptions(v bool) {
	o.HasOptions = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *SecdefInner) GetFullName() string {
	if o == nil || IsNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *SecdefInner) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *SecdefInner) SetFullName(v string) {
	o.FullName = &v
}

// GetIsUS returns the IsUS field value if set, zero value otherwise.
func (o *SecdefInner) GetIsUS() bool {
	if o == nil || IsNil(o.IsUS) {
		var ret bool
		return ret
	}
	return *o.IsUS
}

// GetIsUSOk returns a tuple with the IsUS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetIsUSOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUS) {
		return nil, false
	}
	return o.IsUS, true
}

// HasIsUS returns a boolean if a field has been set.
func (o *SecdefInner) HasIsUS() bool {
	if o != nil && !IsNil(o.IsUS) {
		return true
	}

	return false
}

// SetIsUS gets a reference to the given bool and assigns it to the IsUS field.
func (o *SecdefInner) SetIsUS(v bool) {
	o.IsUS = &v
}

// GetIncrementRules returns the IncrementRules field value if set, zero value otherwise.
func (o *SecdefInner) GetIncrementRules() SecdefInnerIncrementRules {
	if o == nil || IsNil(o.IncrementRules) {
		var ret SecdefInnerIncrementRules
		return ret
	}
	return *o.IncrementRules
}

// GetIncrementRulesOk returns a tuple with the IncrementRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecdefInner) GetIncrementRulesOk() (*SecdefInnerIncrementRules, bool) {
	if o == nil || IsNil(o.IncrementRules) {
		return nil, false
	}
	return o.IncrementRules, true
}

// HasIncrementRules returns a boolean if a field has been set.
func (o *SecdefInner) HasIncrementRules() bool {
	if o != nil && !IsNil(o.IncrementRules) {
		return true
	}

	return false
}

// SetIncrementRules gets a reference to the given SecdefInnerIncrementRules and assigns it to the IncrementRules field.
func (o *SecdefInner) SetIncrementRules(v SecdefInnerIncrementRules) {
	o.IncrementRules = &v
}

func (o SecdefInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecdefInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conid) {
		toSerialize["conid"] = o.Conid
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.CrossCurrency) {
		toSerialize["crossCurrency"] = o.CrossCurrency
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.ChineseName) {
		toSerialize["chineseName"] = o.ChineseName
	}
	if !IsNil(o.AllExchanges) {
		toSerialize["allExchanges"] = o.AllExchanges
	}
	if !IsNil(o.ListingExchange) {
		toSerialize["listingExchange"] = o.ListingExchange
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.AssetClass) {
		toSerialize["assetClass"] = o.AssetClass
	}
	if !IsNil(o.Expiry) {
		toSerialize["expiry"] = o.Expiry
	}
	if !IsNil(o.LastTradingDay) {
		toSerialize["lastTradingDay"] = o.LastTradingDay
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.PutOrCall) {
		toSerialize["putOrCall"] = o.PutOrCall
	}
	if !IsNil(o.Sector) {
		toSerialize["sector"] = o.Sector
	}
	if !IsNil(o.SectorGroup) {
		toSerialize["sectorGroup"] = o.SectorGroup
	}
	if !IsNil(o.Strike) {
		toSerialize["strike"] = o.Strike
	}
	if !IsNil(o.Ticker) {
		toSerialize["ticker"] = o.Ticker
	}
	if !IsNil(o.UndConid) {
		toSerialize["undConid"] = o.UndConid
	}
	if !IsNil(o.Multiplier) {
		toSerialize["multiplier"] = o.Multiplier
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UndComp) {
		toSerialize["undComp"] = o.UndComp
	}
	if !IsNil(o.UndSym) {
		toSerialize["undSym"] = o.UndSym
	}
	if !IsNil(o.HasOptions) {
		toSerialize["hasOptions"] = o.HasOptions
	}
	if !IsNil(o.FullName) {
		toSerialize["fullName"] = o.FullName
	}
	if !IsNil(o.IsUS) {
		toSerialize["isUS"] = o.IsUS
	}
	if !IsNil(o.IncrementRules) {
		toSerialize["incrementRules"] = o.IncrementRules
	}
	return toSerialize, nil
}

type NullableSecdefInner struct {
	value *SecdefInner
	isSet bool
}

func (v NullableSecdefInner) Get() *SecdefInner {
	return v.value
}

func (v *NullableSecdefInner) Set(val *SecdefInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSecdefInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSecdefInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecdefInner(val *SecdefInner) *NullableSecdefInner {
	return &NullableSecdefInner{value: val, isSet: true}
}

func (v NullableSecdefInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecdefInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
