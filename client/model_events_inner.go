/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the EventsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventsInner{}

// EventsInner struct for EventsInner
type EventsInner struct {
	IndexDateType *string `json:"index_date_type,omitempty"`
	EventType     *string `json:"event_type,omitempty"`
	// will be different for different event types
	Data   map[string]interface{} `json:"data,omitempty"`
	Conids []string               `json:"conids,omitempty"`
	// for exmple 20180817T040000+0000
	IndexDate *string `json:"index_date,omitempty"`
	// for example RSE
	Source *string `json:"source,omitempty"`
	// for example 11662135
	EventKey *string                `json:"event_key,omitempty"`
	Tooltips map[string]interface{} `json:"tooltips,omitempty"`
	Status   *string                `json:"status,omitempty"`
}

// NewEventsInner instantiates a new EventsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsInner() *EventsInner {
	this := EventsInner{}
	return &this
}

// NewEventsInnerWithDefaults instantiates a new EventsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsInnerWithDefaults() *EventsInner {
	this := EventsInner{}
	return &this
}

// GetIndexDateType returns the IndexDateType field value if set, zero value otherwise.
func (o *EventsInner) GetIndexDateType() string {
	if o == nil || IsNil(o.IndexDateType) {
		var ret string
		return ret
	}
	return *o.IndexDateType
}

// GetIndexDateTypeOk returns a tuple with the IndexDateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsInner) GetIndexDateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IndexDateType) {
		return nil, false
	}
	return o.IndexDateType, true
}

// HasIndexDateType returns a boolean if a field has been set.
func (o *EventsInner) HasIndexDateType() bool {
	if o != nil && !IsNil(o.IndexDateType) {
		return true
	}

	return false
}

// SetIndexDateType gets a reference to the given string and assigns it to the IndexDateType field.
func (o *EventsInner) SetIndexDateType(v string) {
	o.IndexDateType = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *EventsInner) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsInner) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *EventsInner) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *EventsInner) SetEventType(v string) {
	o.EventType = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *EventsInner) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsInner) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *EventsInner) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *EventsInner) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetConids returns the Conids field value if set, zero value otherwise.
func (o *EventsInner) GetConids() []string {
	if o == nil || IsNil(o.Conids) {
		var ret []string
		return ret
	}
	return o.Conids
}

// GetConidsOk returns a tuple with the Conids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsInner) GetConidsOk() ([]string, bool) {
	if o == nil || IsNil(o.Conids) {
		return nil, false
	}
	return o.Conids, true
}

// HasConids returns a boolean if a field has been set.
func (o *EventsInner) HasConids() bool {
	if o != nil && !IsNil(o.Conids) {
		return true
	}

	return false
}

// SetConids gets a reference to the given []string and assigns it to the Conids field.
func (o *EventsInner) SetConids(v []string) {
	o.Conids = v
}

// GetIndexDate returns the IndexDate field value if set, zero value otherwise.
func (o *EventsInner) GetIndexDate() string {
	if o == nil || IsNil(o.IndexDate) {
		var ret string
		return ret
	}
	return *o.IndexDate
}

// GetIndexDateOk returns a tuple with the IndexDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsInner) GetIndexDateOk() (*string, bool) {
	if o == nil || IsNil(o.IndexDate) {
		return nil, false
	}
	return o.IndexDate, true
}

// HasIndexDate returns a boolean if a field has been set.
func (o *EventsInner) HasIndexDate() bool {
	if o != nil && !IsNil(o.IndexDate) {
		return true
	}

	return false
}

// SetIndexDate gets a reference to the given string and assigns it to the IndexDate field.
func (o *EventsInner) SetIndexDate(v string) {
	o.IndexDate = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *EventsInner) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsInner) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *EventsInner) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *EventsInner) SetSource(v string) {
	o.Source = &v
}

// GetEventKey returns the EventKey field value if set, zero value otherwise.
func (o *EventsInner) GetEventKey() string {
	if o == nil || IsNil(o.EventKey) {
		var ret string
		return ret
	}
	return *o.EventKey
}

// GetEventKeyOk returns a tuple with the EventKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsInner) GetEventKeyOk() (*string, bool) {
	if o == nil || IsNil(o.EventKey) {
		return nil, false
	}
	return o.EventKey, true
}

// HasEventKey returns a boolean if a field has been set.
func (o *EventsInner) HasEventKey() bool {
	if o != nil && !IsNil(o.EventKey) {
		return true
	}

	return false
}

// SetEventKey gets a reference to the given string and assigns it to the EventKey field.
func (o *EventsInner) SetEventKey(v string) {
	o.EventKey = &v
}

// GetTooltips returns the Tooltips field value if set, zero value otherwise.
func (o *EventsInner) GetTooltips() map[string]interface{} {
	if o == nil || IsNil(o.Tooltips) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tooltips
}

// GetTooltipsOk returns a tuple with the Tooltips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsInner) GetTooltipsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tooltips) {
		return map[string]interface{}{}, false
	}
	return o.Tooltips, true
}

// HasTooltips returns a boolean if a field has been set.
func (o *EventsInner) HasTooltips() bool {
	if o != nil && !IsNil(o.Tooltips) {
		return true
	}

	return false
}

// SetTooltips gets a reference to the given map[string]interface{} and assigns it to the Tooltips field.
func (o *EventsInner) SetTooltips(v map[string]interface{}) {
	o.Tooltips = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EventsInner) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsInner) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EventsInner) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *EventsInner) SetStatus(v string) {
	o.Status = &v
}

func (o EventsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IndexDateType) {
		toSerialize["index_date_type"] = o.IndexDateType
	}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Conids) {
		toSerialize["conids"] = o.Conids
	}
	if !IsNil(o.IndexDate) {
		toSerialize["index_date"] = o.IndexDate
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.EventKey) {
		toSerialize["event_key"] = o.EventKey
	}
	if !IsNil(o.Tooltips) {
		toSerialize["tooltips"] = o.Tooltips
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableEventsInner struct {
	value *EventsInner
	isSet bool
}

func (v NullableEventsInner) Get() *EventsInner {
	return v.value
}

func (v *NullableEventsInner) Set(val *EventsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsInner(val *EventsInner) *NullableEventsInner {
	return &NullableEventsInner{value: val, isSet: true}
}

func (v NullableEventsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
