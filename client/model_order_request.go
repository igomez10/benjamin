/*
Client Portal Web API

Client Poral Web API

API version: 1.0.0
Contact: e@e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the OrderRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderRequest{}

// OrderRequest struct for OrderRequest
type OrderRequest struct {
	// acctId is optional. It should be one of the accounts returned by /iserver/accounts. If not passed, the first one in the list is selected.
	AcctId *string `json:"acctId,omitempty"`
	// conid is the identifier of the security you want to trade, you can find the conid with /iserver/secdef/search.
	Conid *int32 `json:"conid,omitempty"`
	// Conid and Exchange - Can be used instead of conid when specifying the contract identifier of a security.
	Conidex *string `json:"conidex,omitempty"`
	// The contract-identifier (conid) and security type (type) specified as a concatenated value, conid:type
	SecType *string `json:"secType,omitempty"`
	// Customer Order ID. An arbitrary string that can be used to identify the order, e.g \"my-fb-order\". The value must be unique for a 24h span. Please do not set this value for child orders when placing a bracket order.
	COID *string `json:"cOID,omitempty"`
	// Only specify for child orders when placing bracket orders. The parentId for the child order(s) must be equal to the cOId (customer order id) of the parent.
	ParentId *string `json:"parentId,omitempty"`
	// The order-type determines what type of order you want to send.   * LMT - A limit order is an order to buy or sell at the specified price or better.   * MKT - A market order is an order to buy or sell at the markets current NBBO.   * STP - A stop order becomes a market order once the specified stop price is attained or penetrated.   * STOP_LIMIT - A stop limit order becomes a limit order once the specified stop price is attained or penetrated.   * MIDPRICE - A MidPrice order attempts to fill at the current midpoint of the NBBO or better.   * TRAIL - A sell trailing stop order sets the stop price at a fixed amount below the market price with an attached \"trailing\" amount. See more details here: https://ndcdyn.interactivebrokers.com/en/index.php?f=605   * TRAILLMT - A trailing stop limit order is designed to allow an investor to specify a limit on the maximum possible loss, without setting a limit on the maximum possible gain.     See more details here: https://ndcdyn.interactivebrokers.com/en/index.php?f=606
	OrderType *string `json:"orderType,omitempty"`
	// listingExchange is optional. By default we use \"SMART\" routing. Possible values are available via the endpoint: /iserver/contract/{conid}/info, see **valid_exchange** e.g: SMART,AMEX,NYSE,CBOE,ISE,CHX,ARCA,ISLAND,DRCTEDGE,BEX,BATS,EDGEA,CSFBALGO,JE FFALGO,BYX,IEX,FOXRIVER,TPLUS1,NYSENAT,PSX
	ListingExchange *string `json:"listingExchange,omitempty"`
	// set to true if you want to place a single group orders(OCA)
	IsSingleGroup *bool `json:"isSingleGroup,omitempty"`
	// set to true if the order can be executed outside regular trading hours.
	OutsideRTH *bool `json:"outsideRTH,omitempty"`
	// optional if order is LMT, or STOP_LIMIT, this is the limit price. For STP|TRAIL this is the stop price. For MIDPRICE this is the option price cap.
	Price *float32 `json:"price,omitempty"`
	// optional if order is STOP_LIMIT|TRAILLMT, this is the stop price. You must specify both price and auxPrice for STOP_LIMIT|TRAILLMT orders.
	AuxPrice map[string]interface{} `json:"auxPrice,omitempty"`
	// SELL or BUY
	Side *string `json:"side,omitempty"`
	// This is the  underlying symbol for the contract.
	Ticker *string `json:"ticker,omitempty"`
	// The Time-In-Force determines how long the order remains active on the market.   * GTC - use Good-Till-Cancel for orders to remain active until it executes or cancelled.   * OPG - use Open-Price-Guarantee for Limit-On-Open (LOO) or Market-On-Open (MOO) orders.   * DAY - if not executed a Day order will automatically cancel at the end of the markets regular trading hours.   * IOC - any portion of an Immediate-or-Cancel order that is not filled as soon as it becomes available in the market is cancelled.
	Tif *string `json:"tif,omitempty"`
	// optional if order is TRAIL, or TRAILLMT. When trailingType is amt, this is the trailing amount, when trailingType is %, it means percentage. You must specify both trailingType and trailingAmt for TRAIL and TRAILLMT order
	TrailingAmt *float32 `json:"trailingAmt,omitempty"`
	// This is the trailing type for trailing amount. We only support two types here: amt or %. You must specify both trailingType and trailingAmt for TRAIL and TRAILLMT order
	TrailingType *string `json:"trailingType,omitempty"`
	// Custom order reference
	Referrer *string `json:"referrer,omitempty"`
	// Usually integer, for some special cases such as fractional orders can specify as a float, e.g. quantity = 0.001. In some special cases quantity is not specified, such as when using 'cashQty' or 'fxQty'.
	Quantity *float32 `json:"quantity,omitempty"`
	// Cash Quantity - used to specify the monetary value of an order instead of the number of shares. When using 'cashQty' don't specify 'quantity' Orders that express size using a monetary value, e.g. cash quantity can result in fractional shares and are provided on a non-guaranteed basis. The system simulates the order by canceling it once the specified amount is spent (for buy orders) or collected (for sell orders). In addition to the monetary value, the order uses a maximum size that is calculated using the Cash Quantity Estimated Factor, which can be modified in Order Presets.
	CashQty *float32 `json:"cashQty,omitempty"`
	// double number, this is the cash quantity field which can only be used for Currency Conversion Orders. When using 'fxQty' don't specify 'quantity'.
	FxQty *float32 `json:"fxQty,omitempty"`
	// If true, the system will use the Price Management Algo to submit the order. https://www.interactivebrokers.com/en/index.php?f=43423
	UseAdaptive *bool `json:"useAdaptive,omitempty"`
	// set to true if the order is a FX conversion order
	IsCcyConv *bool `json:"isCcyConv,omitempty"`
	// Set the allocation method when placing an order using an FA account for a group Possible allocation methods are \"NetLiquidity\", \"AvailableEquity\", \"EqualQuantity\" and \"PctChange\".
	AllocationMethod *string `json:"allocationMethod,omitempty"`
	// Specify which IB Algo algorithm to use for this order.
	Strategy *string `json:"strategy,omitempty"`
	// The IB Algo parameters for the specified algorithm.
	StrategyParameters map[string]interface{} `json:"strategyParameters,omitempty"`
}

// NewOrderRequest instantiates a new OrderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderRequest() *OrderRequest {
	this := OrderRequest{}
	return &this
}

// NewOrderRequestWithDefaults instantiates a new OrderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderRequestWithDefaults() *OrderRequest {
	this := OrderRequest{}
	return &this
}

// GetAcctId returns the AcctId field value if set, zero value otherwise.
func (o *OrderRequest) GetAcctId() string {
	if o == nil || IsNil(o.AcctId) {
		var ret string
		return ret
	}
	return *o.AcctId
}

// GetAcctIdOk returns a tuple with the AcctId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetAcctIdOk() (*string, bool) {
	if o == nil || IsNil(o.AcctId) {
		return nil, false
	}
	return o.AcctId, true
}

// HasAcctId returns a boolean if a field has been set.
func (o *OrderRequest) HasAcctId() bool {
	if o != nil && !IsNil(o.AcctId) {
		return true
	}

	return false
}

// SetAcctId gets a reference to the given string and assigns it to the AcctId field.
func (o *OrderRequest) SetAcctId(v string) {
	o.AcctId = &v
}

// GetConid returns the Conid field value if set, zero value otherwise.
func (o *OrderRequest) GetConid() int32 {
	if o == nil || IsNil(o.Conid) {
		var ret int32
		return ret
	}
	return *o.Conid
}

// GetConidOk returns a tuple with the Conid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetConidOk() (*int32, bool) {
	if o == nil || IsNil(o.Conid) {
		return nil, false
	}
	return o.Conid, true
}

// HasConid returns a boolean if a field has been set.
func (o *OrderRequest) HasConid() bool {
	if o != nil && !IsNil(o.Conid) {
		return true
	}

	return false
}

// SetConid gets a reference to the given int32 and assigns it to the Conid field.
func (o *OrderRequest) SetConid(v int32) {
	o.Conid = &v
}

// GetConidex returns the Conidex field value if set, zero value otherwise.
func (o *OrderRequest) GetConidex() string {
	if o == nil || IsNil(o.Conidex) {
		var ret string
		return ret
	}
	return *o.Conidex
}

// GetConidexOk returns a tuple with the Conidex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetConidexOk() (*string, bool) {
	if o == nil || IsNil(o.Conidex) {
		return nil, false
	}
	return o.Conidex, true
}

// HasConidex returns a boolean if a field has been set.
func (o *OrderRequest) HasConidex() bool {
	if o != nil && !IsNil(o.Conidex) {
		return true
	}

	return false
}

// SetConidex gets a reference to the given string and assigns it to the Conidex field.
func (o *OrderRequest) SetConidex(v string) {
	o.Conidex = &v
}

// GetSecType returns the SecType field value if set, zero value otherwise.
func (o *OrderRequest) GetSecType() string {
	if o == nil || IsNil(o.SecType) {
		var ret string
		return ret
	}
	return *o.SecType
}

// GetSecTypeOk returns a tuple with the SecType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetSecTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SecType) {
		return nil, false
	}
	return o.SecType, true
}

// HasSecType returns a boolean if a field has been set.
func (o *OrderRequest) HasSecType() bool {
	if o != nil && !IsNil(o.SecType) {
		return true
	}

	return false
}

// SetSecType gets a reference to the given string and assigns it to the SecType field.
func (o *OrderRequest) SetSecType(v string) {
	o.SecType = &v
}

// GetCOID returns the COID field value if set, zero value otherwise.
func (o *OrderRequest) GetCOID() string {
	if o == nil || IsNil(o.COID) {
		var ret string
		return ret
	}
	return *o.COID
}

// GetCOIDOk returns a tuple with the COID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetCOIDOk() (*string, bool) {
	if o == nil || IsNil(o.COID) {
		return nil, false
	}
	return o.COID, true
}

// HasCOID returns a boolean if a field has been set.
func (o *OrderRequest) HasCOID() bool {
	if o != nil && !IsNil(o.COID) {
		return true
	}

	return false
}

// SetCOID gets a reference to the given string and assigns it to the COID field.
func (o *OrderRequest) SetCOID(v string) {
	o.COID = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *OrderRequest) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *OrderRequest) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *OrderRequest) SetParentId(v string) {
	o.ParentId = &v
}

// GetOrderType returns the OrderType field value if set, zero value otherwise.
func (o *OrderRequest) GetOrderType() string {
	if o == nil || IsNil(o.OrderType) {
		var ret string
		return ret
	}
	return *o.OrderType
}

// GetOrderTypeOk returns a tuple with the OrderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetOrderTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OrderType) {
		return nil, false
	}
	return o.OrderType, true
}

// HasOrderType returns a boolean if a field has been set.
func (o *OrderRequest) HasOrderType() bool {
	if o != nil && !IsNil(o.OrderType) {
		return true
	}

	return false
}

// SetOrderType gets a reference to the given string and assigns it to the OrderType field.
func (o *OrderRequest) SetOrderType(v string) {
	o.OrderType = &v
}

// GetListingExchange returns the ListingExchange field value if set, zero value otherwise.
func (o *OrderRequest) GetListingExchange() string {
	if o == nil || IsNil(o.ListingExchange) {
		var ret string
		return ret
	}
	return *o.ListingExchange
}

// GetListingExchangeOk returns a tuple with the ListingExchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetListingExchangeOk() (*string, bool) {
	if o == nil || IsNil(o.ListingExchange) {
		return nil, false
	}
	return o.ListingExchange, true
}

// HasListingExchange returns a boolean if a field has been set.
func (o *OrderRequest) HasListingExchange() bool {
	if o != nil && !IsNil(o.ListingExchange) {
		return true
	}

	return false
}

// SetListingExchange gets a reference to the given string and assigns it to the ListingExchange field.
func (o *OrderRequest) SetListingExchange(v string) {
	o.ListingExchange = &v
}

// GetIsSingleGroup returns the IsSingleGroup field value if set, zero value otherwise.
func (o *OrderRequest) GetIsSingleGroup() bool {
	if o == nil || IsNil(o.IsSingleGroup) {
		var ret bool
		return ret
	}
	return *o.IsSingleGroup
}

// GetIsSingleGroupOk returns a tuple with the IsSingleGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetIsSingleGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSingleGroup) {
		return nil, false
	}
	return o.IsSingleGroup, true
}

// HasIsSingleGroup returns a boolean if a field has been set.
func (o *OrderRequest) HasIsSingleGroup() bool {
	if o != nil && !IsNil(o.IsSingleGroup) {
		return true
	}

	return false
}

// SetIsSingleGroup gets a reference to the given bool and assigns it to the IsSingleGroup field.
func (o *OrderRequest) SetIsSingleGroup(v bool) {
	o.IsSingleGroup = &v
}

// GetOutsideRTH returns the OutsideRTH field value if set, zero value otherwise.
func (o *OrderRequest) GetOutsideRTH() bool {
	if o == nil || IsNil(o.OutsideRTH) {
		var ret bool
		return ret
	}
	return *o.OutsideRTH
}

// GetOutsideRTHOk returns a tuple with the OutsideRTH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetOutsideRTHOk() (*bool, bool) {
	if o == nil || IsNil(o.OutsideRTH) {
		return nil, false
	}
	return o.OutsideRTH, true
}

// HasOutsideRTH returns a boolean if a field has been set.
func (o *OrderRequest) HasOutsideRTH() bool {
	if o != nil && !IsNil(o.OutsideRTH) {
		return true
	}

	return false
}

// SetOutsideRTH gets a reference to the given bool and assigns it to the OutsideRTH field.
func (o *OrderRequest) SetOutsideRTH(v bool) {
	o.OutsideRTH = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *OrderRequest) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *OrderRequest) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *OrderRequest) SetPrice(v float32) {
	o.Price = &v
}

// GetAuxPrice returns the AuxPrice field value if set, zero value otherwise.
func (o *OrderRequest) GetAuxPrice() map[string]interface{} {
	if o == nil || IsNil(o.AuxPrice) {
		var ret map[string]interface{}
		return ret
	}
	return o.AuxPrice
}

// GetAuxPriceOk returns a tuple with the AuxPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetAuxPriceOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AuxPrice) {
		return map[string]interface{}{}, false
	}
	return o.AuxPrice, true
}

// HasAuxPrice returns a boolean if a field has been set.
func (o *OrderRequest) HasAuxPrice() bool {
	if o != nil && !IsNil(o.AuxPrice) {
		return true
	}

	return false
}

// SetAuxPrice gets a reference to the given map[string]interface{} and assigns it to the AuxPrice field.
func (o *OrderRequest) SetAuxPrice(v map[string]interface{}) {
	o.AuxPrice = v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *OrderRequest) GetSide() string {
	if o == nil || IsNil(o.Side) {
		var ret string
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetSideOk() (*string, bool) {
	if o == nil || IsNil(o.Side) {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *OrderRequest) HasSide() bool {
	if o != nil && !IsNil(o.Side) {
		return true
	}

	return false
}

// SetSide gets a reference to the given string and assigns it to the Side field.
func (o *OrderRequest) SetSide(v string) {
	o.Side = &v
}

// GetTicker returns the Ticker field value if set, zero value otherwise.
func (o *OrderRequest) GetTicker() string {
	if o == nil || IsNil(o.Ticker) {
		var ret string
		return ret
	}
	return *o.Ticker
}

// GetTickerOk returns a tuple with the Ticker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetTickerOk() (*string, bool) {
	if o == nil || IsNil(o.Ticker) {
		return nil, false
	}
	return o.Ticker, true
}

// HasTicker returns a boolean if a field has been set.
func (o *OrderRequest) HasTicker() bool {
	if o != nil && !IsNil(o.Ticker) {
		return true
	}

	return false
}

// SetTicker gets a reference to the given string and assigns it to the Ticker field.
func (o *OrderRequest) SetTicker(v string) {
	o.Ticker = &v
}

// GetTif returns the Tif field value if set, zero value otherwise.
func (o *OrderRequest) GetTif() string {
	if o == nil || IsNil(o.Tif) {
		var ret string
		return ret
	}
	return *o.Tif
}

// GetTifOk returns a tuple with the Tif field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetTifOk() (*string, bool) {
	if o == nil || IsNil(o.Tif) {
		return nil, false
	}
	return o.Tif, true
}

// HasTif returns a boolean if a field has been set.
func (o *OrderRequest) HasTif() bool {
	if o != nil && !IsNil(o.Tif) {
		return true
	}

	return false
}

// SetTif gets a reference to the given string and assigns it to the Tif field.
func (o *OrderRequest) SetTif(v string) {
	o.Tif = &v
}

// GetTrailingAmt returns the TrailingAmt field value if set, zero value otherwise.
func (o *OrderRequest) GetTrailingAmt() float32 {
	if o == nil || IsNil(o.TrailingAmt) {
		var ret float32
		return ret
	}
	return *o.TrailingAmt
}

// GetTrailingAmtOk returns a tuple with the TrailingAmt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetTrailingAmtOk() (*float32, bool) {
	if o == nil || IsNil(o.TrailingAmt) {
		return nil, false
	}
	return o.TrailingAmt, true
}

// HasTrailingAmt returns a boolean if a field has been set.
func (o *OrderRequest) HasTrailingAmt() bool {
	if o != nil && !IsNil(o.TrailingAmt) {
		return true
	}

	return false
}

// SetTrailingAmt gets a reference to the given float32 and assigns it to the TrailingAmt field.
func (o *OrderRequest) SetTrailingAmt(v float32) {
	o.TrailingAmt = &v
}

// GetTrailingType returns the TrailingType field value if set, zero value otherwise.
func (o *OrderRequest) GetTrailingType() string {
	if o == nil || IsNil(o.TrailingType) {
		var ret string
		return ret
	}
	return *o.TrailingType
}

// GetTrailingTypeOk returns a tuple with the TrailingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetTrailingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TrailingType) {
		return nil, false
	}
	return o.TrailingType, true
}

// HasTrailingType returns a boolean if a field has been set.
func (o *OrderRequest) HasTrailingType() bool {
	if o != nil && !IsNil(o.TrailingType) {
		return true
	}

	return false
}

// SetTrailingType gets a reference to the given string and assigns it to the TrailingType field.
func (o *OrderRequest) SetTrailingType(v string) {
	o.TrailingType = &v
}

// GetReferrer returns the Referrer field value if set, zero value otherwise.
func (o *OrderRequest) GetReferrer() string {
	if o == nil || IsNil(o.Referrer) {
		var ret string
		return ret
	}
	return *o.Referrer
}

// GetReferrerOk returns a tuple with the Referrer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetReferrerOk() (*string, bool) {
	if o == nil || IsNil(o.Referrer) {
		return nil, false
	}
	return o.Referrer, true
}

// HasReferrer returns a boolean if a field has been set.
func (o *OrderRequest) HasReferrer() bool {
	if o != nil && !IsNil(o.Referrer) {
		return true
	}

	return false
}

// SetReferrer gets a reference to the given string and assigns it to the Referrer field.
func (o *OrderRequest) SetReferrer(v string) {
	o.Referrer = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *OrderRequest) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *OrderRequest) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *OrderRequest) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetCashQty returns the CashQty field value if set, zero value otherwise.
func (o *OrderRequest) GetCashQty() float32 {
	if o == nil || IsNil(o.CashQty) {
		var ret float32
		return ret
	}
	return *o.CashQty
}

// GetCashQtyOk returns a tuple with the CashQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetCashQtyOk() (*float32, bool) {
	if o == nil || IsNil(o.CashQty) {
		return nil, false
	}
	return o.CashQty, true
}

// HasCashQty returns a boolean if a field has been set.
func (o *OrderRequest) HasCashQty() bool {
	if o != nil && !IsNil(o.CashQty) {
		return true
	}

	return false
}

// SetCashQty gets a reference to the given float32 and assigns it to the CashQty field.
func (o *OrderRequest) SetCashQty(v float32) {
	o.CashQty = &v
}

// GetFxQty returns the FxQty field value if set, zero value otherwise.
func (o *OrderRequest) GetFxQty() float32 {
	if o == nil || IsNil(o.FxQty) {
		var ret float32
		return ret
	}
	return *o.FxQty
}

// GetFxQtyOk returns a tuple with the FxQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetFxQtyOk() (*float32, bool) {
	if o == nil || IsNil(o.FxQty) {
		return nil, false
	}
	return o.FxQty, true
}

// HasFxQty returns a boolean if a field has been set.
func (o *OrderRequest) HasFxQty() bool {
	if o != nil && !IsNil(o.FxQty) {
		return true
	}

	return false
}

// SetFxQty gets a reference to the given float32 and assigns it to the FxQty field.
func (o *OrderRequest) SetFxQty(v float32) {
	o.FxQty = &v
}

// GetUseAdaptive returns the UseAdaptive field value if set, zero value otherwise.
func (o *OrderRequest) GetUseAdaptive() bool {
	if o == nil || IsNil(o.UseAdaptive) {
		var ret bool
		return ret
	}
	return *o.UseAdaptive
}

// GetUseAdaptiveOk returns a tuple with the UseAdaptive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetUseAdaptiveOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAdaptive) {
		return nil, false
	}
	return o.UseAdaptive, true
}

// HasUseAdaptive returns a boolean if a field has been set.
func (o *OrderRequest) HasUseAdaptive() bool {
	if o != nil && !IsNil(o.UseAdaptive) {
		return true
	}

	return false
}

// SetUseAdaptive gets a reference to the given bool and assigns it to the UseAdaptive field.
func (o *OrderRequest) SetUseAdaptive(v bool) {
	o.UseAdaptive = &v
}

// GetIsCcyConv returns the IsCcyConv field value if set, zero value otherwise.
func (o *OrderRequest) GetIsCcyConv() bool {
	if o == nil || IsNil(o.IsCcyConv) {
		var ret bool
		return ret
	}
	return *o.IsCcyConv
}

// GetIsCcyConvOk returns a tuple with the IsCcyConv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetIsCcyConvOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCcyConv) {
		return nil, false
	}
	return o.IsCcyConv, true
}

// HasIsCcyConv returns a boolean if a field has been set.
func (o *OrderRequest) HasIsCcyConv() bool {
	if o != nil && !IsNil(o.IsCcyConv) {
		return true
	}

	return false
}

// SetIsCcyConv gets a reference to the given bool and assigns it to the IsCcyConv field.
func (o *OrderRequest) SetIsCcyConv(v bool) {
	o.IsCcyConv = &v
}

// GetAllocationMethod returns the AllocationMethod field value if set, zero value otherwise.
func (o *OrderRequest) GetAllocationMethod() string {
	if o == nil || IsNil(o.AllocationMethod) {
		var ret string
		return ret
	}
	return *o.AllocationMethod
}

// GetAllocationMethodOk returns a tuple with the AllocationMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetAllocationMethodOk() (*string, bool) {
	if o == nil || IsNil(o.AllocationMethod) {
		return nil, false
	}
	return o.AllocationMethod, true
}

// HasAllocationMethod returns a boolean if a field has been set.
func (o *OrderRequest) HasAllocationMethod() bool {
	if o != nil && !IsNil(o.AllocationMethod) {
		return true
	}

	return false
}

// SetAllocationMethod gets a reference to the given string and assigns it to the AllocationMethod field.
func (o *OrderRequest) SetAllocationMethod(v string) {
	o.AllocationMethod = &v
}

// GetStrategy returns the Strategy field value if set, zero value otherwise.
func (o *OrderRequest) GetStrategy() string {
	if o == nil || IsNil(o.Strategy) {
		var ret string
		return ret
	}
	return *o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.Strategy) {
		return nil, false
	}
	return o.Strategy, true
}

// HasStrategy returns a boolean if a field has been set.
func (o *OrderRequest) HasStrategy() bool {
	if o != nil && !IsNil(o.Strategy) {
		return true
	}

	return false
}

// SetStrategy gets a reference to the given string and assigns it to the Strategy field.
func (o *OrderRequest) SetStrategy(v string) {
	o.Strategy = &v
}

// GetStrategyParameters returns the StrategyParameters field value if set, zero value otherwise.
func (o *OrderRequest) GetStrategyParameters() map[string]interface{} {
	if o == nil || IsNil(o.StrategyParameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.StrategyParameters
}

// GetStrategyParametersOk returns a tuple with the StrategyParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderRequest) GetStrategyParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.StrategyParameters) {
		return map[string]interface{}{}, false
	}
	return o.StrategyParameters, true
}

// HasStrategyParameters returns a boolean if a field has been set.
func (o *OrderRequest) HasStrategyParameters() bool {
	if o != nil && !IsNil(o.StrategyParameters) {
		return true
	}

	return false
}

// SetStrategyParameters gets a reference to the given map[string]interface{} and assigns it to the StrategyParameters field.
func (o *OrderRequest) SetStrategyParameters(v map[string]interface{}) {
	o.StrategyParameters = v
}

func (o OrderRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AcctId) {
		toSerialize["acctId"] = o.AcctId
	}
	if !IsNil(o.Conid) {
		toSerialize["conid"] = o.Conid
	}
	if !IsNil(o.Conidex) {
		toSerialize["conidex"] = o.Conidex
	}
	if !IsNil(o.SecType) {
		toSerialize["secType"] = o.SecType
	}
	if !IsNil(o.COID) {
		toSerialize["cOID"] = o.COID
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.OrderType) {
		toSerialize["orderType"] = o.OrderType
	}
	if !IsNil(o.ListingExchange) {
		toSerialize["listingExchange"] = o.ListingExchange
	}
	if !IsNil(o.IsSingleGroup) {
		toSerialize["isSingleGroup"] = o.IsSingleGroup
	}
	if !IsNil(o.OutsideRTH) {
		toSerialize["outsideRTH"] = o.OutsideRTH
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.AuxPrice) {
		toSerialize["auxPrice"] = o.AuxPrice
	}
	if !IsNil(o.Side) {
		toSerialize["side"] = o.Side
	}
	if !IsNil(o.Ticker) {
		toSerialize["ticker"] = o.Ticker
	}
	if !IsNil(o.Tif) {
		toSerialize["tif"] = o.Tif
	}
	if !IsNil(o.TrailingAmt) {
		toSerialize["trailingAmt"] = o.TrailingAmt
	}
	if !IsNil(o.TrailingType) {
		toSerialize["trailingType"] = o.TrailingType
	}
	if !IsNil(o.Referrer) {
		toSerialize["referrer"] = o.Referrer
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.CashQty) {
		toSerialize["cashQty"] = o.CashQty
	}
	if !IsNil(o.FxQty) {
		toSerialize["fxQty"] = o.FxQty
	}
	if !IsNil(o.UseAdaptive) {
		toSerialize["useAdaptive"] = o.UseAdaptive
	}
	if !IsNil(o.IsCcyConv) {
		toSerialize["isCcyConv"] = o.IsCcyConv
	}
	if !IsNil(o.AllocationMethod) {
		toSerialize["allocationMethod"] = o.AllocationMethod
	}
	if !IsNil(o.Strategy) {
		toSerialize["strategy"] = o.Strategy
	}
	if !IsNil(o.StrategyParameters) {
		toSerialize["strategyParameters"] = o.StrategyParameters
	}
	return toSerialize, nil
}

type NullableOrderRequest struct {
	value *OrderRequest
	isSet bool
}

func (v NullableOrderRequest) Get() *OrderRequest {
	return v.value
}

func (v *NullableOrderRequest) Set(val *OrderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderRequest(val *OrderRequest) *NullableOrderRequest {
	return &NullableOrderRequest{value: val, isSet: true}
}

func (v NullableOrderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
